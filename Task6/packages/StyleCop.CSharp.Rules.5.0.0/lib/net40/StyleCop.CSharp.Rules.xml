<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StyleCop.CSharp.Rules</name>
    </assembly>
    <members>
        <member name="T:StyleCop.CSharp.CachedCodeStrings">
            <summary>
            Loaded and cached code strings used within the DocumentationRules analyzer.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CachedCodeStrings.classText">
            <summary>
            The text for "class".
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CachedCodeStrings.exampleHeaderSummaryForDestructor">
            <summary>
            Example header text string "Finalizes an instance of the {0} class".
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CachedCodeStrings.exampleHeaderSummaryForInstanceConstructor">
            <summary>
            Example header text string "Initializes a new instance of the {0} class".
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CachedCodeStrings.exampleHeaderSummaryForPrivateInstanceConstructor">
            <summary>
            Example header text string "Prevents an instance of the class from being created".
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CachedCodeStrings.exampleHeaderSummaryForStaticConstructor">
            <summary>
            Example header text string "Initializes static data within the {0} class".
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CachedCodeStrings.headerSummaryForBooleanGetAccessor">
            <summary>
            Header text string "Gets a value indicating whether".
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CachedCodeStrings.headerSummaryForBooleanGetAndSetAccessor">
            <summary>
            Header text string "Gets or sets a value indicating whether".
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CachedCodeStrings.headerSummaryForBooleanSetAccessor">
            <summary>
            Header text string "Sets a value indicating whether".
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CachedCodeStrings.headerSummaryForDestructor">
            <summary>
            Header text string "Finalizes an instance of the {0} class".
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CachedCodeStrings.headerSummaryForGetAccessor">
            <summary>
            Header text string "Gets".
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CachedCodeStrings.headerSummaryForGetAndSetAccessor">
            <summary>
            Header text string "Gets or sets".
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CachedCodeStrings.headerSummaryForInstanceConstructor">
            <summary>
            Header text string "Initializes a new instance of the {0} class".
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CachedCodeStrings.headerSummaryForPrivateInstanceConstructor">
            <summary>
            Header text string "Prevents an instance of the class from being created".
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CachedCodeStrings.headerSummaryForSetAccessor">
            <summary>
            Header text string "Sets".
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CachedCodeStrings.headerSummaryForStaticConstructor">
            <summary>
            Header text string "Initializes static data within the {0} class".
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CachedCodeStrings.parameterNotUsed">
            <summary>
            Header text string "The parameter is not used".
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CachedCodeStrings.structText">
            <summary>
            The text for "struct".
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CachedCodeStrings.ClassText">
            <summary>
            Gets the text for "class".
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CachedCodeStrings.Culture">
            <summary>
            Gets or sets the CultureInfo we will analyze with.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CachedCodeStrings.ExampleHeaderSummaryForDestructor">
            <summary>
            Gets example header text string "Finalizes an instance of the {0} class".
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CachedCodeStrings.ExampleHeaderSummaryForInstanceConstructor">
            <summary>
            Gets example header text string "Initializes a new instance of the {0} {1}".
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CachedCodeStrings.ExampleHeaderSummaryForPrivateInstanceConstructor">
            <summary>
            Gets example header text string "Prevents a default instance of the {0} {1} from being created".
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CachedCodeStrings.ExampleHeaderSummaryForStaticConstructor">
            <summary>
            Gets example header text string "Initializes static data within the {0} class".
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CachedCodeStrings.HeaderSummaryForBooleanGetAccessor">
            <summary>
            Gets header text string "Gets a value indicating whether".
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CachedCodeStrings.HeaderSummaryForBooleanGetAndSetAccessor">
            <summary>
            Gets header text string "Gets or sets a value indicating whether".
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CachedCodeStrings.HeaderSummaryForBooleanSetAccessor">
            <summary>
            Gets header text string "Sets a value indicating whether".
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CachedCodeStrings.HeaderSummaryForDestructor">
            <summary>
            Gets header text string "Finalizes an instance of the {0} class".
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CachedCodeStrings.HeaderSummaryForGetAccessor">
            <summary>
            Gets header text string "Gets".
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CachedCodeStrings.HeaderSummaryForGetAndSetAccessor">
            <summary>
            Gets header text string "Gets or sets".
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CachedCodeStrings.HeaderSummaryForInstanceConstructor">
            <summary>
            Gets header text string "Initializes a new instance of the {0} {1}".
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CachedCodeStrings.HeaderSummaryForPrivateInstanceConstructor">
            <summary>
            Gets header text string "Prevents an instance of the class from being created".
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CachedCodeStrings.HeaderSummaryForSetAccessor">
            <summary>
            Gets header text string "Sets".
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CachedCodeStrings.HeaderSummaryForStaticConstructor">
            <summary>
            Gets header text string "Initializes static data within the {0} class".
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CachedCodeStrings.ParameterNotUsed">
            <summary>
            Gets header text string "The parameter is not used".
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CachedCodeStrings.StructText">
            <summary>
            Gets the text for "struct".
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.CachedCodeStrings.ClearCachedStrings">
            <summary>
            Reset the cached strings.
            </summary>
        </member>
        <member name="T:StyleCop.CSharp.DocumentationRules">
            <summary>
            Checks element documentation for the correct contents.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.DocumentationRules.CompanyNameProperty">
            <summary>
            The name of the property contains the company name.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.DocumentationRules.CopyrightProperty">
            <summary>
            The name of the property which contains the copyright.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.DocumentationRules.IgnoreInternals">
            <summary>
            The name of the property which ignores internal elements.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.DocumentationRules.IgnoreInternalsDefaultValue">
            <summary>
            The default value of the property which ignores internal elements.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.DocumentationRules.IgnorePrivates">
            <summary>
            The name of the property which ignores private elements.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.DocumentationRules.IgnorePrivatesDefaultValue">
            <summary>
            The default value of the property which ignores private elements.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.DocumentationRules.IncludeFieldsDefaultValue">
            <summary>
            The default value of the property which checks for headers on fields.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.DocumentationRules.IncludeFieldsProperty">
            <summary>
            The name of the property which checks for headers on fields.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.DocumentationRules.CrefGenericParamsRegex">
            <summary>
            A regular expression to match the generic parameters list for a type. Needs the outer parenthesis as its inserted into other regular expressions.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.DocumentationRules.CrefRegex">
            <summary>
            A regular expression to match a type reference included within a <c>cref</c> attribute.
            </summary>
            <remarks>
            Consider a namespace A.B and type Foo.Bar
            Foo has 2 generic parameters and Bar has 3 generic parameters
            {0}: qualified type name with the number of generic parameters on it too (like A.B.Foo`2.Bar`3)
            {1}: type name options with generics removed (like A.B.Foo.Bar | B.Foo.Bar | Foo.Bar | Bar)
            {2}: type name with generic parameters <see cref="T:System.Text.RegularExpressions.Regex"/> already on it ( like A.B.Foo{A,B}.Bar{C,D,E} | B.Foo{A,B}.Bar{C,D,E} | Foo{A,B}.Bar{C,D,E} | Bar{C,D,E} )
            </remarks>
        </member>
        <member name="F:StyleCop.CSharp.DocumentationRules.CopyrightCharTable">
            <summary>
            Various version of the @ character.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.DocumentationRules.includedDocs">
            <summary>
            Dictionary of external documentation which has been included into the code being analyzed.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.DocumentationRules.SettingsPages">
            <summary>
            Gets the property pages to expose on the StyleCop settings dialog for this analyzer.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.AnalyzeDocument(StyleCop.CodeDocument)">
            <summary>
            Checks the element headers within the given document.
            </summary>
            <param name="document">
            The document to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.DelayAnalysis(StyleCop.CodeDocument,System.Int32)">
            <summary>
            Returns a value indicating whether to delay analysis of this document until the next pass.
            </summary>
            <param name="document">
            The document to analyze. 
            </param>
            <param name="passNumber">
            The current pass number. 
            </param>
            <returns>
            Returns true if analysis should be delayed. 
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.DoAnalysis(StyleCop.CodeDocument)">
            <inheritdoc />
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.GetDependantFilesHashCode(System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.PostAnalyze">
            <summary>
            Called after an analysis run is completed.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.PreAnalyze">
            <summary>
            Called before an analysis run is initiated.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.BuildCrefValidationStringForType(StyleCop.CSharp.ClassBase)">
            <summary>
            Builds a regular expression that can be used to validate the name of the given type when 
            used within a documentation <c>cref</c> attribute.
            </summary>
            <param name="type">
            The type to match against.
            </param>
            <returns>
            Returns the regular expression object.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.BuildGenericParametersRegex(System.String[])">
            <summary>
            Builds a <see cref="T:System.Text.RegularExpressions.Regex"/> matching string to match the given generic parameter list.
            </summary>
            <param name="genericParams">
            The list of generic parameters.
            </param>
            <returns>
            Returns the <see cref="T:System.Text.RegularExpressions.Regex"/> string.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.BuildRegExForAllTypeOptions(StyleCop.CSharp.ClassBase,System.String@,System.String@)">
            <summary>
            For a type Foo.Bar in namespace A.B this returns (A.B.Foo.Bar | B.Foo.Bar | Foo.Bar | Bar) and (A.B.Foo{E,F}.Bar | B.Foo{E,F}.Bar | Foo{E,F}.Bar | Bar)
            </summary>
            <param name="type">
            The type to build the <see cref="T:System.Text.RegularExpressions.Regex"/> for.
            </param>
            <param name="regexWithGenerics">
            The <see cref="T:System.Text.RegularExpressions.Regex"/> with generics.
            </param>
            <param name="regexWithoutGenerics">
            The <see cref="T:System.Text.RegularExpressions.Regex"/> without generics.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.BuildRegExStringFromTypeName(System.String)">
            <summary>
            Builds a <see cref="T:System.Text.RegularExpressions.Regex"/> string from the type name passed in.
            </summary>
            <param name="qualifiedTypeName">
            The qualified type name to build a <see cref="T:System.Text.RegularExpressions.Regex"/> for.
            </param>
            <returns>
            The <see cref="T:System.Text.RegularExpressions.Regex"/> string.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.BuildTypeNameStringWithGenerics(System.String)">
            <summary>
            Builds the type name string with generics.
            </summary>
            <param name="typeName">
            Name of the type.
            </param>
            <returns>
            A type name string with a <see cref="T:System.Text.RegularExpressions.Regex"/> to match generics as the suffix.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.BuildTypeNameStringWithParamsNumber(System.String)">
            <summary>
            Builds the type name string with parameters number.
            </summary>
            <param name="typeName">
            Name of the type.
            </param>
            <returns>
            A type name string with the numbers of generics as the suffix.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CharacterIsCopyright(System.Char)">
            <summary>
            Determines whether the given character is a copyright.
            </summary>
            <param name="character">
            The character to check.
            </param>
            <returns>
            Returns true if the character is a copyright; false otherwise.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CountOfStringInStringOccurrences(System.String,System.String[])">
            <summary>
            Returns the count of occurrences of stringToFind in the provided string.
            </summary>
            <param name="text">
            The text to search through.
            </param>
            <param name="stringsToFind">
            The strings to count.
            </param>
            <returns>
            The count of stringToFind in the text. If text or stringToFind are empty or null then return 0.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.ExtractDocumentationNodeFromIncludedFile(System.Xml.XmlDocument,System.String)">
            <summary>
            Extracts the node at the given path from the given document.
            </summary>
            <param name="document">
            The included documentation object.
            </param>
            <param name="xpath">
            The xpath pointing to the documentation node to load from the file.
            </param>
            <returns>
            Returns the included documentation nodes.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.ExtractGenericParametersFromType(System.String,System.Int32)">
            <summary>
            Extracts the collection of generic parameters from the given type name.
            </summary>
            <param name="typeName">
            The name of the type.
            </param>
            <param name="index">
            The index of the opening generic bracket within the type name.
            </param>
            <returns>
            Returns the array of type names.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.ExtractGenericTypeList(System.String)">
            <summary>
            Extracts the type parameters from a generic type string.
            </summary>
            <param name="name">
            The generic type string.
            </param>
            <returns>
            Returns the list of type parameters, if any.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.ExtractGenericTypeParameter(System.String,System.Int32,System.Int32)">
            <summary>
            Extracts the generic type parameter out of part of a generic type.
            </summary>
            <param name="fullType">
            The full generic type.
            </param>
            <param name="startIndex">
            The start index of the generic type parameter.
            </param>
            <param name="endIndex">
            The index just past the end of the generic type parameter. 
            </param>
            <returns>
            Returns the extracted type.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.ExtractIncludeTagFileAndPath(System.Xml.XmlNode,System.String@,System.String@)">
            <summary>
            Extracts the file and path information from an 'include' tag.
            </summary>
            <param name="documentationNode">
            The include tag node.
            </param>
            <param name="file">
            Returns the file information.
            </param>
            <param name="path">
            Returns the path information.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.FormatXmlDocument(System.Xml.XmlDocument)">
            <summary>
            Takes an xml doc and trims whitespace from its children and removes any newlines
            </summary>
            <param name="doc">
            The XmlDocument to format.
            </param>
            <returns>
            An XmlDocument nicely formatted.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.GetActualQualifiedNamespace(StyleCop.CSharp.ClassBase)">
            <summary>
            Gets the actual qualified namespace of the class. For nested types where A.B.C.D exists and C.D is the type it returns A.B rather than A.B.C.
            </summary>
            <param name="type">
            The type to get the namespace for.
            </param>
            <returns>
            A string of the actual namespace.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.GetExampleSummaryTextForConstructorType(StyleCop.CSharp.Constructor,System.String)">
            <summary>
            Gets the example expected summary text for a constructor, based on the type of the constructor.
            </summary>
            <param name="constructor">
            The constructor.
            </param>
            <param name="type">
            The type of the element containing the constructor.
            </param>
            <returns>
            Returns the example summary text.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.GetExampleSummaryTextForDestructor(StyleCop.CSharp.Destructor)">
            <summary>
            Gets the example expected summary text for a destructor.
            </summary>
            <param name="destructor">
            The destructor.
            </param>
            <returns>
            Returns the example summary text.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.GetExpectedSummaryTextForConstructorType(StyleCop.CSharp.Constructor,System.String,System.String)">
            <summary>
            Gets the expected summary text <see cref="T:System.Text.RegularExpressions.Regex"/> for a constructor, based on the type of the constructor.
            </summary>
            <param name="constructor">
            The constructor.
            </param>
            <param name="type">
            The type of the element containing the constructor.
            </param>
            <param name="typeRegex">
            The regular expression for matching the type name.
            </param>
            <returns>
            Returns the expected summary text <see cref="T:System.Text.RegularExpressions.Regex"/>.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.GetExpectedSummaryTextForDestructor(System.String)">
            <summary>
            Gets the expected summary text <see cref="T:System.Text.RegularExpressions.Regex"/> for a destructor.
            </summary>
            <param name="typeRegex">
            The regular expression for matching the type name.
            </param>
            <returns>
            Returns the expected summary text <see cref="T:System.Text.RegularExpressions.Regex"/>.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.IncludeSetAccessorInDocumentation(StyleCop.CSharp.Property,StyleCop.CSharp.Accessor)">
            <summary>
            Determines whether to reference the set accessor within the property's summary documentation.
            </summary>
            <param name="property">
            The property.
            </param>
            <param name="setAccessor">
            The set accessor.
            </param>
            <returns>
            Returns true to reference the set accessor in the summary documentation, or false to omit it.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.IsNonPublicStaticExternDllImport(StyleCop.CSharp.CsElement)">
            <summary>
            Determines whether the given element is a non-public, static extern element with a DllImport attribute.
            </summary>
            <param name="element">
            The element to check.
            </param>
            <returns>
            Returns true if the element is a non-public, static extern element.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.IsXmlHeaderLineEmpty(StyleCop.CSharp.CsToken)">
            <summary>
            Determines whether the given xml header is empty.
            </summary>
            <param name="token">
            The xml header line token.
            </param>
            <returns>
            Returns true if the header is empty.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.LoadDocFileFromDisk(System.String)">
            <summary>
            Loads an Xml documentation file from the disk.
            </summary>
            <param name="path">
            The full path to the file to load.
            </param>
            <returns>
            Returns the document or null if it could not be loaded.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.MatchCopyrightText(System.String,System.String)">
            <summary>
            Matches the two copyright text strings to determine if they are the same.
            </summary>
            <param name="copyright1">
            The first copyright string.
            </param>
            <param name="copyright2">
            The second copyright string.
            </param>
            <returns>
            Returns true if they are the same; false otherwise.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.RemoveGenericsFromTypeName(System.String)">
            <summary>
            Removes the generics from type name provided.
            </summary>
            <param name="typeName">
            Name of the type.
            </param>
            <returns>
            A string of the type name without the generics at the end.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.XmlHeaderLineCodeElementCount(StyleCop.CSharp.CsToken)">
            <summary>
            Returns the net count of opening and closing 'code' and 'c' elements for the token provided.
            </summary>
            <param name="token">
            The xml header line token.
            </param>
            <returns>
            The net count of open and close 'code' and 'c' elements.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CheckClassElementHeader(StyleCop.CSharp.ClassBase,StyleCop.CSharp.DocumentationRules.AnalyzerSettings)">
            <summary>
            Checks the Xml header block of the given class for consistency with the class.
            </summary>
            <param name="classElement">
            The element to parse.
            </param>
            <param name="settings">
            The analyzer settings.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CheckConstructorSummaryText(StyleCop.CSharp.Constructor,System.Xml.XmlDocument)">
            <summary>
            Checks a constructor to ensure that the summary text matches the expected text.
            </summary>
            <param name="constructor">
            The constructor to check.
            </param>
            <param name="formattedDocs">
            The formatted header documentation.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CheckDestructorSummaryText(StyleCop.CSharp.Destructor,System.Xml.XmlDocument)">
            <summary>
            Checks a destructor to ensure that the summary text matches the expected text.
            </summary>
            <param name="destructor">
            The destructor to check.
            </param>
            <param name="formattedDocs">
            The formatted header documentation.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CheckDocumentationForElement(StyleCop.CSharp.CsElement,StyleCop.CSharp.CsElement,StyleCop.CSharp.DocumentationRules.AnalyzerSettings)">
            <summary>
            Processes the given element.
            </summary>
            <param name="element">
            The element being visited.
            </param>
            <param name="parentElement">
            The parent element, if any.
            </param>
            <param name="settings">
            The analyzer settings.
            </param>
            <returns>
            Returns true to continue, or false to stop the walker.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CheckDocumentationValidity(StyleCop.CSharp.CsElement,System.Int32,System.Xml.XmlNode,System.String)">
            <summary>
            Checks the given documentation to ensure that it meets the documentation text rules.
            </summary>
            <param name="element">
            The element containing the documentation.
            </param>
            <param name="lineNumber">
            The line number that the element appears on.
            </param>
            <param name="documentationXml">
            The documentation text.
            </param>
            <param name="documentationType">
            The type of the documentation text.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CheckElementComments(StyleCop.CSharp.CsElement)">
            <summary>
            Checks the statements for single line comments that start with three slashes.
            </summary>
            <param name="element">
            The element to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CheckElementDocumentation(StyleCop.CSharp.CsDocument)">
            <summary>
            Checks the contents of the documentation for the elements in the document.
            </summary>
            <param name="document">
            The document to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CheckEnumHeaders(StyleCop.CSharp.Enum,StyleCop.CSharp.DocumentationRules.AnalyzerSettings)">
            <summary>
            Checks the Xml header block for consistency with the element it belongs to.
            </summary>
            <param name="element">
            The element to parse.
            </param>
            <param name="settings">
            The analyzer settings.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CheckFileHeader(StyleCop.CSharp.CsDocument)">
            <summary>
            Checks the contents of the file header.
            </summary>
            <param name="document">
            The document containing the header.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CheckFileHeader(StyleCop.CSharp.CsDocument,System.String,System.String)">
            <summary>
            Checks the file header for the given document.
            </summary>
            <param name="document">
            The document to check.
            </param>
            <param name="copyright">
            The required copyright text.
            </param>
            <param name="companyName">
            The required company name text.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CheckForBlankLinesInDocumentationHeader(StyleCop.CSharp.CsElement,StyleCop.CSharp.XmlHeader)">
            <summary>
            Checks the documentation header to see whether it contains any blank lines.
            </summary>
            <param name="element">
            The element containing the header.
            </param>
            <param name="header">
            The documentation header.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CheckForRepeatingComments(StyleCop.CSharp.CsElement,System.Xml.XmlDocument)">
            <summary>
            Checks for comments that appear more than once in a header.
            </summary>
            <param name="element">
            The element containing the header.
            </param>
            <param name="formattedDocs">
            The formatted Xml documentation.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CheckGenericTypeParams(StyleCop.CSharp.CsElement,System.Xml.XmlDocument)">
            <summary>
            Checks the generic type parameters of a header for consistency with the item the header belongs to.
            </summary>
            <param name="element">
            The element to check.
            </param>
            <param name="formattedDocs">
            The formatted Xml document that comprises the header.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CheckHeader(StyleCop.CSharp.CsElement,StyleCop.CSharp.DocumentationRules.AnalyzerSettings,System.Boolean)">
            <summary>
            Checks the Xml header block for consistency with the element it belongs to.
            </summary>
            <param name="element">
            The element to parse.
            </param>
            <param name="settings">
            The analyzer settings.
            </param>
            <param name="partialElement">
            Indicates whether the element has the partial attribute.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CheckHeaderElementsForEmptyText(StyleCop.CSharp.CsElement,System.Xml.XmlDocument)">
            <summary>
            Checks for the presence of text in standard header elements.
            </summary>
            <param name="element">
            The element to parse.
            </param>
            <param name="formattedDocs">
            The formatted Xml document that comprises the header.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CheckHeaderParams(StyleCop.CSharp.CsElement,System.Collections.Generic.ICollection{StyleCop.CSharp.Parameter},System.Xml.XmlDocument)">
            <summary>
            Checks the parameters of a header for consistency with the method the header belongs to.
            </summary>
            <param name="element">
            The element to check.
            </param>
            <param name="parameters">
            The list of parameters in the element.
            </param>
            <param name="formattedDocs">
            The formatted Xml document that comprises the header.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CheckHeaderReturnValue(StyleCop.CSharp.CsElement,StyleCop.CSharp.TypeToken,System.Xml.XmlDocument)">
            <summary>
            Checks for the presence of a return value tag on an element.
            </summary>
            <param name="element">
            The element to parse.
            </param>
            <param name="returnType">
            The return type.
            </param>
            <param name="formattedDocs">
            The formatted Xml document that comprises the header.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CheckHeaderSummary(StyleCop.CSharp.CsElement,System.Int32,System.Boolean,System.Xml.XmlDocument)">
            <summary>
            Checks the summary tag from a header.
            </summary>
            <param name="element">
            The element containing the header.
            </param>
            <param name="lineNumber">
            The line number of the header.
            </param>
            <param name="partialElement">
            Indicates whether the element is a partial element.
            </param>
            <param name="formattedDocs">
            The formatted header documentation.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CheckInheritDocRules(StyleCop.CSharp.CsElement)">
            <summary>
            Checks the given element which contains an <c>inheritdoc</c> tag in the header.
            </summary>
            <param name="element">
            The element to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CheckPropertySummaryFormatting(StyleCop.CSharp.Property,System.Xml.XmlDocument)">
            <summary>
            Checks a property element to ensure that the header contains a 'value' tag.
            </summary>
            <param name="property">
            The property to check.
            </param>
            <param name="formattedDocs">
            The formatted header documentation.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CheckPropertyValueTag(StyleCop.CSharp.CsElement,System.Xml.XmlDocument)">
            <summary>
            Checks a property element to ensure that the header contains a 'value' tag.
            </summary>
            <param name="element">
            The element to check.
            </param>
            <param name="formattedDocs">
            The formatted header documentation.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CheckSingleLineComments(StyleCop.CSharp.DocumentRoot)">
            <summary>
            Checks the document for single line comments that start with three slashes.
            </summary>
            <param name="root">
            The document root.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.GetFirstTypeName(StyleCop.CSharp.CsElement,System.String@,StyleCop.CSharp.ElementType@)">
            <summary>
            Returns True if the first type defined is partial, otherwise False and also returns the first type name and first ElementType in the document. 
            For partial classes it returns the name of the partial class concatenated with its first non-partial child.
            </summary>
            <param name="parentElement">
            The element to start at.
            </param>
            <param name="firstTypeName">
            The first type name found or null if no type defined.
            </param>
            <param name="firstTypeElementType">
            The ElementType of the first type.
            </param>
            <returns>
            True if the first type defined is partial, otherwise false.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.GetShortestItem(System.String[])">
            <summary>
            Returns the shortest item passed in not including any empty items.
            </summary>
            <param name="items">
            The items to check.
            </param>
            <returns>
            The shortest non-empty item.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.InsertIncludedDocumentation(StyleCop.CSharp.CsElement,System.Xml.XmlDocument)">
            <summary>
            Inserts any included documentation into the given documentation header.
            </summary>
            <param name="element">
            The element containing the documentation.
            </param>
            <param name="documentation">
            The documentation header.
            </param>
            <returns>
            Returns false if a violation was found.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.InsertIncludedDocumentationForChildNodes(StyleCop.CSharp.CsElement,System.Xml.XmlNode)">
            <summary>
            Iterates through the children of the given documentation node, and replaces any include tags found there.
            </summary>
            <param name="element">
            The element containing the documentation.
            </param>
            <param name="documentationNode">
            The documentation node.
            </param>
            <returns>
            Returns true of success; false otherwise.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.InsertIncludedDocumentationForNode(StyleCop.CSharp.CsElement,System.Xml.XmlNode)">
            <summary>
            Inserts any included documentation under the given documentation node.
            </summary>
            <param name="element">
            The element containing the documentation.
            </param>
            <param name="documentationNode">
            The documentation node.
            </param>
            <returns>
            Returns false if a violation was found.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.LoadAndReplaceIncludeTag(StyleCop.CSharp.CsElement,System.Xml.XmlNode)">
            <summary>
            Loads and inserts included documentation.
            </summary>
            <param name="element">
            The element containing the documentation.
            </param>
            <param name="documentationNode">
            The 'include' tag node.
            </param>
            <returns>
            Returns true on success.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.LoadHeaderIntoDocuments(StyleCop.CSharp.CsElement,StyleCop.CSharp.XmlHeader,System.Int32,System.Xml.XmlDocument@,System.Xml.XmlDocument@)">
            <summary>
            Loads the header text for the element into a document and returns it.
            </summary>
            <param name="element">
            The element containing the header.
            </param>
            <param name="header">
            The header to load.
            </param>
            <param name="lineNumber">
            The line number that the header begins on.
            </param>
            <param name="rawDocs">
            Returns the docs with whitespace and newlines left in place.
            </param>
            <param name="formattedDocs">
            Returns the docs with newlines filtered out.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.LoadIncludedDocumentationFile(System.String,System.String)">
            <summary>
            Loads a documentation file included into a documentation header through an 'include' tag.
            </summary>
            <param name="basePath">
            The base path where the caller is located.
            </param>
            <param name="file">
            The documentation file to load.
            </param>
            <returns>
            Returns the included documentation object.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.ParseHeader(StyleCop.CSharp.CsElement,StyleCop.CSharp.XmlHeader,System.Int32,System.Boolean)">
            <summary>
            Parses the contents of the header for validity.
            </summary>
            <param name="element">
            The element.
            </param>
            <param name="header">
            The header.
            </param>
            <param name="lineNumber">
            The line number that the header element begins on.
            </param>
            <param name="partialElement">
            Indicates whether the element has the partial attribute.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.HasExcludeTag(System.Xml.XmlDocument)">
            <summary>
            Determines whether an <c>exclude</c> tag exists in the documentation.
            </summary>
            <param name="formattedDocs">The XML documentation to check.</param>
            <returns>
              <see langword="true" /> if an exclude tag is present; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.RemoveExtensions(System.String)">
            <summary>
            Removes all known extensions from the path provided.
            </summary>
            <param name="path">
            The path to remove the extensions from.
            </param>
            <returns>
            The path without any extensions.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.ReplaceIncludeTagWithIncludedDocumentationContents(StyleCop.CSharp.CsElement,System.Xml.XmlNode,StyleCop.CSharp.DocumentationRules.CachedXmlDocument,System.Xml.XmlNodeList)">
            <summary>
            Replaces an include tag with the contents of the included documentation.
            </summary>
            <param name="element">
            The element containing the documentation.
            </param>
            <param name="documentationNode">
            The documentation node within the documentation.
            </param>
            <param name="includedDocument">
            The included document.
            </param>
            <param name="includedDocumentationNodes">
            The included nodes within the included document.
            </param>
            <returns>
            Returns true on success; false otherwise.
            </returns>
        </member>
        <member name="T:StyleCop.CSharp.DocumentationRules.AnalyzerSettings">
            <summary>
            The settings for the analyzer.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.DocumentationRules.AnalyzerSettings.IgnoreInternals">
            <summary>
            Indicates whether to ignore internal members.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.DocumentationRules.AnalyzerSettings.IgnorePrivates">
            <summary>
            Indicates whether to ignore private members.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.DocumentationRules.AnalyzerSettings.RequireFields">
            <summary>
            Indicates whether to require documentation for fields.
            </summary>
        </member>
        <member name="T:StyleCop.CSharp.DocumentationRules.CachedXmlDocument">
            <summary>
            Represents one Xml documentation document loaded from disk.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.DocumentationRules.CachedXmlDocument.document">
            <summary>
            The document.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.DocumentationRules.CachedXmlDocument.filePath">
            <summary>
            The path to the file on disk.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.DocumentationRules.CachedXmlDocument.#ctor(System.String,System.Xml.XmlDocument)">
            <summary>
            Initializes a new instance of the CachedXmlDocument class.
            </summary>
            <param name="filePath">
            The path to the file on disk.
            </param>
            <param name="document">
            The document.
            </param>
        </member>
        <member name="P:StyleCop.CSharp.DocumentationRules.CachedXmlDocument.Document">
            <summary>
            Gets the document.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.DocumentationRules.CachedXmlDocument.FilePath">
            <summary>
            Gets the path to the file on disk.
            </summary>
        </member>
        <member name="T:StyleCop.CSharp.InvalidCommentType">
            <summary>
            The possible return values from the IsGarbageComment method.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.InvalidCommentType.Valid">
            <summary>
            The comment appears to be a valid comment.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.InvalidCommentType.Empty">
            <summary>
            The comment is empty or consists only of whitespace.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.InvalidCommentType.TooShort">
            <summary>
            The comment is shorter than the minimum comment length.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.InvalidCommentType.NoCapitalLetter">
            <summary>
            The comment does not start with a capital letter.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.InvalidCommentType.NoPeriod">
            <summary>
            The comment does not end in a period.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.InvalidCommentType.TooFewCharacters">
            <summary>
            The comments consists of too many symbols and too few characters.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.InvalidCommentType.NoWhitespace">
            <summary>
            The comment does not contain any whitespace.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.InvalidCommentType.IncorrectSpelling">
            <summary>
            The comment has spelling mistakes.
            </summary>
        </member>
        <member name="T:StyleCop.CSharp.LayoutRules">
            <summary>
            Checks layout rules.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.LayoutRules.AnalyzeDocument(StyleCop.CodeDocument)">
            <summary>
            Checks the placement of brackets within the given document.
            </summary>
            <param name="document">
            The document to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.LayoutRules.DoAnalysis(StyleCop.CodeDocument)">
            <inheritdoc />
        </member>
        <member name="M:StyleCop.CSharp.LayoutRules.BracketSharesLine(StyleCop.Node{StyleCop.CSharp.CsToken},System.Boolean)">
            <summary>
            Determines whether the given bracket is the only thing on its line or whether it shares the line.
            </summary>
            <param name="bracketNode">
            The bracket to check.
            </param>
            <param name="allowTrailingCharacters">
            Indicates whether a semicolon, comma or closing parenthesis after the 
            bracket is allowed.
            </param>
            <returns>
            Returns true if the bracket shares the line with something else.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.LayoutRules.DoesAccessorHaveBody(StyleCop.CSharp.Accessor)">
            <summary>
            4
            Determines whether the given accessor contains a body. 
            </summary>
            <param name="accessor">
            The accessor to check.
            </param>
            <returns>
            Returns true if the accessor contains a body.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.LayoutRules.GetFirstChildStatement(StyleCop.CSharp.Statement)">
            <summary>
            Gets the first child statement of the given statement, if one exists.
            </summary>
            <param name="statement">
            The statement.
            </param>
            <returns>
            Returns the first child statement or null if none exist.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.LayoutRules.GetOpenBracket(StyleCop.CSharp.CsTokenList)">
            <summary>
            Gets the first open curly bracket in the token list.
            </summary>
            <param name="tokens">
            The list of tokens.
            </param>
            <returns>
            Returns the first open curly bracket or -1 if there are none.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.LayoutRules.GetOpeningOrClosingBracketText(StyleCop.CSharp.Bracket)">
            <summary>
            Gets friendly output text for "opening" or "closing", depending on the type of the bracket.
            </summary>
            <param name="bracket">
            The bracket.
            </param>
            <returns>
            Returns the opening or closing text.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.LayoutRules.IsAutomaticProperty(StyleCop.CSharp.Property)">
            <summary>
            Determines whether the given property is an automatic property.
            </summary>
            <param name="property">
            The property to check.
            </param>
            <returns>
            Returns true if the property is an automatic property.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.LayoutRules.IsCommentInFileHeader(StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Determines whether the given token is part of a file header. It is considered
            part of a file header if the only tokens in front of it are single-line comments,
            preprocessor directives, whitespace, or newlines.
            </summary>
            <param name="comment">
            The comment to check.
            </param>
            <returns>
            Returns true if the comment is part of a file header.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.LayoutRules.IsTokenADot(StyleCop.CSharp.CsToken)">
            <summary>
            Compares the token to the Operator symbol and to a dot '.'.
            </summary>
            <param name="token">
            The token to check.
            </param>
            <returns>
            True is the token is an operator and a dot '.', otherwise false.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.LayoutRules.CheckBracketPlacement(StyleCop.CSharp.CsElement,StyleCop.CSharp.Statement,StyleCop.CSharp.CsTokenList,StyleCop.Node{StyleCop.CSharp.CsToken},System.Boolean)">
            <summary>
            Checks the placement of curly brackets within the given item.
            </summary>
            <param name="parentElement">
            The element containing the brackets.
            </param>
            <param name="parentStatement">
            The statement containing the brackets, if any.
            </param>
            <param name="tokens">
            The statement or element token list.
            </param>
            <param name="openBracketNode">
            The opening curly bracket within the token list.
            </param>
            <param name="allowAllOnOneLine">
            Indicates whether the brackets are allowed to be all on one line.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.LayoutRules.CheckChildElementSpacing(StyleCop.CSharp.CsElement)">
            <summary>
            Checks the spacing of child elements of the given element, to ensure that elements
            are separated by a blank line.
            </summary>
            <param name="element">
            The element being visited.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.LayoutRules.CheckElementBracketPlacement(StyleCop.CSharp.CsElement,System.Boolean)">
            <summary>
            Checks the placement of curly brackets on the current element.
            </summary>
            <param name="element">
            The element to check.
            </param>
            <param name="allowAllOnOneLine">
            Indicates whether the brackets are allowed to be all on one line.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.LayoutRules.CheckElementCurlyBracketPlacement(StyleCop.CSharp.CsElement)">
            <summary>
            Checks the curly brackets under the given element.
            </summary>
            <param name="element">
            The element being visited.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.LayoutRules.CheckExpressionCurlyBracketPlacement(StyleCop.CSharp.Expression,StyleCop.CSharp.Expression,StyleCop.CSharp.Statement,StyleCop.CSharp.CsElement,System.Object)">
            <summary>
            Checks the curly brackets under the given expression.
            </summary>
            <param name="expression">
            The expression being visited.
            </param>
            <param name="parentExpression">
            The parent expression, if any.
            </param>
            <param name="parentStatement">
            The parent statement, if any.
            </param>
            <param name="parentElement">
            The parent element, if any.
            </param>
            <param name="context">
            The optional visitor context data.
            </param>
            <returns>
            Returns true to continue, or false to stop the walker.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.LayoutRules.CheckLineSpacing(StyleCop.CSharp.CsDocument)">
            <summary>
            Checks the line spacing within the given document.
            </summary>
            <param name="document">
            The document to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.LayoutRules.CheckLineSpacingNewline(StyleCop.Node{StyleCop.CSharp.CsToken},StyleCop.Node{StyleCop.CSharp.CsToken},System.Int32)">
            <summary>
            Processes a newline character found while checking line spacing rules.
            </summary>
            <param name="precedingTokenNode">
            The preceding non-whitespace token before the newline.
            </param>
            <param name="node">
            The newline token.
            </param>
            <param name="count">
            The current newline count.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.LayoutRules.CheckLineSpacingNonWhitespace(StyleCop.CSharp.CsDocument,StyleCop.Node{StyleCop.CSharp.CsToken},StyleCop.CSharp.CsToken,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Processes a non-whitespace character seen while checking line spacing.
            </summary>
            <param name="document">
            The document containing the token.
            </param>
            <param name="precedingTokenNode">
            The token before the non-whitespace token.
            </param>
            <param name="token">
            The non-whitespace token.
            </param>
            <param name="fileHeader">
            Indicates whether a file header has been seen.
            </param>
            <param name="firstTokenOnLine">
            Indicates whether this is a the first token on the line.
            </param>
            <param name="count">
            The current newline count.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.LayoutRules.CheckMissingBlock(StyleCop.CSharp.CsElement,StyleCop.CSharp.Statement,StyleCop.CSharp.Statement,System.String,System.Boolean)">
            <summary>
            Checks to make sure that if, while, for, and foreach statements are followed by a curly bracket block.
            </summary>
            <param name="parentElement">
            The element containing the statement.
            </param>
            <param name="statement">
            The statement which may or may not be missing the child block
            </param>
            <param name="embeddedStatement">
            The statement embedded within the if, while, for, or foreach statement.
            </param>
            <param name="statementType">
            The user-friendly type of the statement.
            </param>
            <param name="allowStacks">
            True to allow statements of the same type to be stacked together where only the last statement in the stack has curly brackets.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.LayoutRules.CheckSiblingAccessors(StyleCop.CSharp.CsElement,StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks an accessor and its siblings. If the accessor is all on one line, its siblings
            must also be all on one line.
            </summary>
            <param name="accessor">
            The accessor to check.
            </param>
            <param name="openingBracketNode">
            The opening bracket within the accessor.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.LayoutRules.CheckStatementCurlyBracketPlacement(StyleCop.CSharp.Statement,StyleCop.CSharp.Expression,StyleCop.CSharp.Statement,StyleCop.CSharp.CsElement,System.Object)">
            <summary>
            Checks the curly brackets under the given statement.
            </summary>
            <param name="statement">
            The statement being visited.
            </param>
            <param name="parentExpression">
            The parent expression, if any.
            </param>
            <param name="parentStatement">
            The parent statement, if any.
            </param>
            <param name="parentElement">
            The parent element, if any.
            </param>
            <param name="context">
            The optional visitor context data.
            </param>
            <returns>
            Returns true to continue, or false to stop the walker.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.LayoutRules.VisitElement(StyleCop.CSharp.CsElement,StyleCop.CSharp.CsElement,System.Object)">
            <summary>
            Visits an element.
            </summary>
            <param name="element">
            The element being visited.
            </param>
            <param name="parentElement">
            The parent element, if any.
            </param>
            <param name="context">
            The optional visitor context data.
            </param>
            <returns>
            Returns true to continue, or false to stop the walker.
            </returns>
        </member>
        <member name="T:StyleCop.CSharp.MaintainabilityRules">
            <summary>
            Checks compliance with the maintainability rules.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.AnalyzeDocument(StyleCop.CodeDocument)">
            <summary>
            Checks the methods within the given document.
            </summary>
            <param name="document">
            The document to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.DoAnalysis(StyleCop.CodeDocument)">
            <inheritdoc />
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.ArgumentTokensMatchStringEmpty(StyleCop.CSharp.Argument)">
            <summary>
            Determine whether the argument passed in is equivalent to ""
            </summary>
            <param name="argument">
            The Argument to check.
            </param>
            <returns>
            True if equivalent to string.empty otherwise false.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.CheckFileContents(StyleCop.CSharp.CsElement,StyleCop.CSharp.CsElement,StyleCop.CSharp.MaintainabilityRules.TopLevelElements)">
            <summary>
            Processes the given element.
            </summary>
            <param name="element">
            The element being visited.
            </param>
            <param name="parentElement">
            The parent of the element.
            </param>
            <param name="topLevelElements">
            The number of classes and namespaces seen in the document.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.IsEmptyElement(StyleCop.CSharp.CsElement)">
            <summary>
            Checks the element, to indicate whether it is empty or unnecessary.
            </summary>
            <param name="element">
            The element to check.
            </param>
            <returns>
            Returns true if the statement was empty.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.IsEmptyParentOfBlockStatement(StyleCop.CSharp.Statement)">
            <summary>
            Checks the statement, which is a parent of a block statement, to make sure that it is not empty.
            </summary>
            <param name="statement">
            The statement to check.
            </param>
            <returns>
            Returns true if the statement was empty.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.IsEmptyString(System.String)">
            <summary>
            Determines whether the given text contains an empty string, which can be represented as "" or @"".
            </summary>
            <param name="text">
            The text to check.
            </param>
            <returns>
            Returns true if the 
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.IsSuppressMessage(StyleCop.CSharp.MethodInvocationExpression)">
            <summary>
            Determines whether the given method invocation expression contains a code analysis SuppressMessage call.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <returns>
            Returns true if the method is SuppressMessage.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.IsUnnecessaryTryStatement(StyleCop.CSharp.TryStatement)">
            <summary>
            Checks the given try statement to make sure that it is needed.
            </summary>
            <param name="tryStatement">
            The try statement to check.
            </param>
            <returns>
            Returns true if the try statement is not needed, false otherwise.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.CheckAccessModifierRulesForElement(StyleCop.CSharp.CsElement)">
            <summary>
            Checks the access modifier on the element.
            </summary>
            <param name="element">
            The element being visited.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.CheckAnonymousMethodParenthesis(StyleCop.CSharp.CsElement,StyleCop.CSharp.AnonymousMethodExpression)">
            <summary>
            Checks that parenthesis are used correctly within an anonymous method.
            </summary>
            <param name="element">
            The parent element.
            </param>
            <param name="expression">
            The expression to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.CheckArithmeticExpressionParenthesis(StyleCop.CSharp.CsElement,StyleCop.CSharp.ArithmeticExpression)">
            <summary>
            Checks that parenthesis are used correctly within an arithmetic expression.
            </summary>
            <param name="element">
            The parent element.
            </param>
            <param name="expression">
            The expression to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.CheckArithmeticParenthesisForExpressionAndChild(StyleCop.CSharp.CsElement,StyleCop.CSharp.ArithmeticExpression,StyleCop.CSharp.ArithmeticExpression)">
            <summary>
            Checks whether parenthesis are needed within the arithmetic expressions.
            </summary>
            <param name="element">
            The parent element.
            </param>
            <param name="expression">
            The parent arithmetic expression.
            </param>
            <param name="childExpression">
            The child arithmetic expression.
            </param>
            <returns>
            Returns true if there is no violation, or false if there is a violation.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.CheckCodeAnalysisAttributeJustifications(StyleCop.CSharp.CsElement)">
            <summary>
            Checks any code analysis SuppressMessage attributes on the element to make sure
            they all have justification text.
            </summary>
            <param name="element">
            The element being visited.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.CheckCodeAnalysisSuppressionForJustification(StyleCop.CSharp.CsElement,StyleCop.CSharp.MethodInvocationExpression)">
            <summary>
            Checks the given code analysis suppression call to ensure that it contains a justification parameter.
            </summary>
            <param name="element">
            The element that contains the suppression attribute.
            </param>
            <param name="suppression">
            The suppression to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.CheckConditionalLogicalExpressionParenthesis(StyleCop.CSharp.CsElement,StyleCop.CSharp.ConditionalLogicalExpression)">
            <summary>
            Checks that parenthesis are used correctly within a conditional logical expression.
            </summary>
            <param name="element">
            The parent element.
            </param>
            <param name="expression">
            The expression to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.CheckConditionalLogicalParenthesisForExpressionAndChild(StyleCop.CSharp.CsElement,StyleCop.CSharp.ConditionalLogicalExpression,StyleCop.CSharp.ConditionalLogicalExpression)">
            <summary>
            Checks whether parenthesis are needed within the conditional logical expressions.
            </summary>
            <param name="element">
            The parent element.
            </param>
            <param name="expression">
            The parent conditional logical expression.
            </param>
            <param name="childExpression">
            The child conditional logical expression.
            </param>
            <returns>
            Returns true if there is no violation, or false if there is a violation.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.CheckDebugAssertMessage(StyleCop.CSharp.CsElement,StyleCop.CSharp.MethodInvocationExpression)">
            <summary>
            Checks the given call into Debug.Assert to ensure that it contains a valid debug message.
            </summary>
            <param name="element">
            The parent element.
            </param>
            <param name="debugAssertMethodCall">
            The call to Debug.Assert.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.CheckDebugFailMessage(StyleCop.CSharp.CsElement,StyleCop.CSharp.MethodInvocationExpression)">
            <summary>
            Checks the given call into Debug.Fail to ensure that it contains a valid debug message.
            </summary>
            <param name="element">
            The parent element.
            </param>
            <param name="debugFailMethodCall">
            The call to Debug.Fail.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.CheckFieldAccessModifiers(StyleCop.CSharp.CsElement)">
            <summary>
            Verifies that fields are not declared public.
            </summary>
            <param name="element">
            The element to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.CheckForAccessModifier(StyleCop.CSharp.CsElement)">
            <summary>
            Verifies that elements have access modifiers.
            </summary>
            <param name="element">
            The element to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.CheckForEmptyElements(StyleCop.CSharp.CsElement)">
            <summary>
            Checks to see if the element is unnecessary.
            </summary>
            <param name="element">
            The element to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.CheckForUnnecessaryStatements(StyleCop.CSharp.Statement,StyleCop.CSharp.CsElement)">
            <summary>
            Checks to see if the statement is unnecessary.
            </summary>
            <param name="statement">
            The statement to check.
            </param>
            <param name="parentElement">
            The parent element of the statement.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.CheckParenthesisForAttributeConstructors(StyleCop.CSharp.CsElement)">
            <summary>
            Checks that empty parenthesis do not exist for attributes.
            </summary>
            <param name="element">
            The element to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.CheckParenthesizedExpression(StyleCop.CSharp.CsElement,StyleCop.CSharp.ParenthesizedExpression)">
            <summary>
            Checks the given parenthesized expression to make sure that it is not unnecessary.
            </summary>
            <param name="element">
            The element containing the expression.
            </param>
            <param name="parenthesizedExpression">
            The parenthesized expression to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.ProcessElement(StyleCop.CSharp.CsElement,StyleCop.CSharp.CsElement,StyleCop.CSharp.MaintainabilityRules.TopLevelElements)">
            <summary>
            Processes the given element.
            </summary>
            <param name="element">
            The element being visited.
            </param>
            <param name="parentElement">
            The parent element, if any.
            </param>
            <param name="topLevelElements">
            The number of classes and namespaces seen in the document.
            </param>
            <returns>
            Returns true to continue, or false to stop the walker.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.ProcessExpression(StyleCop.CSharp.Expression,StyleCop.CSharp.Expression,StyleCop.CSharp.Statement,StyleCop.CSharp.CsElement,StyleCop.CSharp.MaintainabilityRules.TopLevelElements)">
            <summary>
            Called when an expression is visited.
            </summary>
            <param name="expression">
            The expression being visited.
            </param>
            <param name="parentExpression">
            The parent expression, if any.
            </param>
            <param name="parentStatement">
            The parent statement, if any.
            </param>
            <param name="parentElement">
            The parent element, if any.
            </param>
            <param name="context">
            The optional visitor context data.
            </param>
            <returns>
            Returns true to continue, or false to stop the walker.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.MaintainabilityRules.ProcessStatement(StyleCop.CSharp.Statement,StyleCop.CSharp.Expression,StyleCop.CSharp.Statement,StyleCop.CSharp.CsElement,StyleCop.CSharp.MaintainabilityRules.TopLevelElements)">
            <summary>
            Called when a statement is visited.
            </summary>
            <param name="statement">
            The statement being visited.
            </param>
            <param name="parentExpression">
            The parent expression, if any.
            </param>
            <param name="parentStatement">
            The parent statement, if any.
            </param>
            <param name="parentElement">
            The parent element, if any.
            </param>
            <param name="context">
            The optional visitor context data.
            </param>
            <returns>
            Returns true to continue, or false to stop the walker.
            </returns>
        </member>
        <member name="T:StyleCop.CSharp.MaintainabilityRules.TopLevelElements">
            <summary>
            Keeps track of the number of classes and namespaces seen in the document.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.MaintainabilityRules.TopLevelElements.classes">
            <summary>
            The classes seen in the document.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.MaintainabilityRules.TopLevelElements.namespaces">
            <summary>
            The namespaces seen in the document.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.MaintainabilityRules.TopLevelElements.Classes">
            <summary>
            Gets the classes seen in the document.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.MaintainabilityRules.TopLevelElements.Namespaces">
            <summary>
            Gets the namespaces seen in the document.
            </summary>
        </member>
        <member name="T:StyleCop.CSharp.NamingRules">
            <summary>
            Checks the names of code elements.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.NamingRules.AllowedPrefixesProperty">
            <summary>
            The name of the property containing the list of allowable prefixes.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.NamingRules.SettingsPages">
            <summary>
            Gets the property pages to expose on the StyleCop settings dialog for this analyzer.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.NamingRules.AnalyzeDocument(StyleCop.CodeDocument)">
            <summary>
            Checks the case of element names within the given document.
            </summary>
            <param name="document">
            The document to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.NamingRules.DoAnalysis(StyleCop.CodeDocument)">
            <inheritdoc />
        </member>
        <member name="M:StyleCop.CSharp.NamingRules.MovePastPrefix(System.String)">
            <summary>
            Determines whether the given variable name begins with a standard prefix notation.
            </summary>
            <param name="name">
            The variable name.
            </param>
            <returns>
            Returns the first index in the name string that lies just past the prefix,
            or zero if there is no prefix.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.NamingRules.CheckCase(StyleCop.CSharp.CsElement,System.String,System.Int32,System.Boolean)">
            <summary>
            Checks the case of the first character in the given word.
            </summary>
            <param name="element">
            The element that the word appears in.
            </param>
            <param name="name">
            The word to check.
            </param>
            <param name="line">
            The line that the word appears on.
            </param>
            <param name="upper">
            True if the character should be upper, false if it should be lower.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.NamingRules.CheckFieldPrefix(StyleCop.CSharp.Field,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Checks a field for compliance with naming prefix rules.
            </summary>
            <param name="field">
            The field element.
            </param>
            <param name="validPrefixes">
            A list of valid prefixes that should not be considered hungarian.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.NamingRules.CheckFieldUnderscores(StyleCop.CSharp.CsElement)">
            <summary>
            Checks the field name to look for underscores.
            </summary>
            <param name="field">
            The field to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.NamingRules.CheckHungarian(System.String,System.Int32,System.Int32,StyleCop.CSharp.CsElement,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Checks a variable for hungarian notation.
            </summary>
            <param name="name">
            The variable name.
            </param>
            <param name="startIndex">
            The index in the name where the actual name begins.
            </param>
            <param name="line">
            The number number that this variable appears on, or if 0, uses the line number
            from the element object.
            </param>
            <param name="element">
            The element that the variable appears in.
            </param>
            <param name="validPrefixes">
            A list of valid prefixes that should not be considered hungarian.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.NamingRules.CheckMethodVariablePrefix(StyleCop.CSharp.Variable,StyleCop.CSharp.CsElement,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Checks the prefix for a variable defined within a method or property.
            </summary>
            <param name="variable">
            The variable to check.
            </param>
            <param name="element">
            The element that contains the variable.
            </param>
            <param name="validPrefixes">
            A list of valid prefixes that should not be considered hungarian.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.NamingRules.CheckUnderscores(StyleCop.CSharp.CsElement,StyleCop.CSharp.VariableCollection)">
            <summary>
            Checks variables to look for underscores.
            </summary>
            <param name="element">
            The parent element.
            </param>
            <param name="variables">
            The variables to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.NamingRules.GetPrefixes(StyleCop.Settings)">
            <summary>
            Gets the list of valid prefixes for the given project.
            </summary>
            <param name="settings">
            The settings for the document being parsed.
            </param>
            <returns>
            Returns the list of prefixes.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.NamingRules.ProcessElement(StyleCop.CSharp.CsElement,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Processes one element and its children.
            </summary>
            <param name="element">
            The element to process.
            </param>
            <param name="validPrefixes">
            The list of valid prefixes for this element.
            </param>
            <param name="nativeMethods">
            Indicates whether the element is within a NativeMethods class.
            </param>
            <returns>
            Returns false if the analyzer should quit.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.NamingRules.ProcessExpression(StyleCop.CSharp.Expression,StyleCop.CSharp.CsElement,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Processes the given expression.
            </summary>
            <param name="expression">
            The expression to process.
            </param>
            <param name="element">
            The parent element.
            </param>
            <param name="validPrefixes">
            The list of acceptable Hungarian-type prefixes.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.NamingRules.ProcessStatement(StyleCop.CSharp.Statement,StyleCop.CSharp.CsElement,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Processes the given statement.
            </summary>
            <param name="statement">
            The statement to process.
            </param>
            <param name="element">
            The parent element.
            </param>
            <param name="validPrefixes">
            The list of acceptable Hungarian-type prefixes.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.NamingRules.ProcessStatementContainer(StyleCop.CSharp.CsElement,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Processes the given statement container.
            </summary>
            <param name="element">
            The statement container element to process.
            </param>
            <param name="validPrefixes">
            The list of acceptable Hungarian-type prefixes.
            </param>
        </member>
        <member name="T:StyleCop.CSharp.OrderingRules">
            <summary>
            Check code ordering rules.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.OrderingRules.GeneratedCodeElementOrderDefaultValueProperty">
            <summary>
            The default value of the generated code order property.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.OrderingRules.GeneratedCodeElementOrderProperty">
            <summary>
            The name of the generated code order property. 
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.OrderingRules.AnalyzeDocument(StyleCop.CodeDocument)">
            <summary>
            Checks the order of the elements within the given document.
            </summary>
            <param name="document">
            The document to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.OrderingRules.DoAnalysis(StyleCop.CodeDocument)">
            <inheritdoc />
        </member>
        <member name="M:StyleCop.CSharp.OrderingRules.AccessModifierTypeString(StyleCop.CSharp.AccessModifierType)">
            <summary>
            Converts an access modifier type to a human readable string.
            </summary>
            <param name="type">
            The type to convert.
            </param>
            <returns>
            Returns the human readable string.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.OrderingRules.CheckNamespaceOrdering(System.String,System.String)">
            <summary>
            Determines whether the two namespaces are ordered correctly.
            </summary>
            <param name="namespace1">
            The first namespace.
            </param>
            <param name="namespace2">
            The second namespace.
            </param>
            <returns>
            Returns true if the namespaces are ordered correctly, false otherwise.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.OrderingRules.GetElementOrder(StyleCop.CSharp.CsElement)">
            <summary>
            Returns an order number for the passed in element.
            </summary>
            <param name="element">
            The element to calculate the order of.
            </param>
            <returns>
            The calculated order of the element.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.OrderingRules.CheckChildElementOrdering(StyleCop.CSharp.CsElement,System.Boolean)">
            <summary>
            Checks the order of child elements of the given element.
            </summary>
            <param name="element">
            The element to check.
            </param>
            <param name="checkGeneratedCode">
            Indicates whether to check the order of elements
            within generated blocks of code.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.OrderingRules.CheckDeclarationKeywordOrder(StyleCop.CSharp.CsElement)">
            <summary>
            Checks the order of the declarations in a keyword. Access modifier should come first,
            followed by the 'static' keyword if the element is static, followed by all other keywords.
            </summary>
            <param name="element">
            The element of code to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.OrderingRules.CheckElementOrder(StyleCop.CSharp.CsElement,System.Boolean)">
            <summary>
            Checks the order of elements that appear within the given element.
            </summary>
            <param name="element">
            The element to check.
            </param>
            <param name="checkGeneratedCode">
            True to check the element order of generated code blocks.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.OrderingRules.CheckOrderOfUsingDirectivesInList(System.Collections.Generic.List{StyleCop.CSharp.UsingDirective})">
            <summary>
            Checks the order of the using directives in the given list.
            </summary>
            <param name="usings">
            The list of using directives.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.OrderingRules.CheckOrderOfUsingDirectivesUnderElement(StyleCop.CSharp.CsElement)">
            <summary>
            Checks the order of any using directives found under this element.
            </summary>
            <param name="element">
            The element containing the using directives.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.OrderingRules.CheckUsingDirectiveOrder(StyleCop.CSharp.CsElement)">
            <summary>
            Checks the order of using directives within the document.
            </summary>
            <param name="rootElement">
            The root element containing the using directives.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.OrderingRules.CheckUsingDirectivePlacement(StyleCop.CSharp.CsElement)">
            <summary>
            Checks that using-directives are placed within the namespace element.
            </summary>
            <param name="element">
            The element to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.OrderingRules.CompareItems(StyleCop.CSharp.CsElement,StyleCop.CSharp.CsElement,System.Boolean)">
            <summary>
            Compares two items to determine if they are in the correct order.
            </summary>
            <param name="first">
            The first item to compare.
            </param>
            <param name="second">
            The second item to compare.
            </param>
            <param name="foundFirst">
            Determines whether we've found the first item
            in the code that is in the correct order.
            </param>
            <returns>
            Returns true if the first item should come before the second item, or false if vice-versa.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.OrderingRules.CompareOrderOfUsingDirectives(StyleCop.CSharp.UsingDirective,StyleCop.CSharp.UsingDirective)">
            <summary>
            Compares the order of two using directives.
            </summary>
            <param name="firstUsing">
            The first using directive.
            </param>
            <param name="secondUsing">
            The second using directive.
            </param>
            <returns>
            Returns false if the elements are out of order.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.OrderingRules.ProcessElements(StyleCop.CSharp.CsElement,System.Boolean)">
            <summary>
            Checks the given code element.
            </summary>
            <param name="element">
            The code element to check.
            </param>
            <param name="checkGeneratedCode">
            True to check the element order of generated code blocks.
            </param>
            <returns>
            Returns false if the analyzer should quit.
            </returns>
        </member>
        <member name="T:StyleCop.CSharp.CodeStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CodeStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CodeStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CodeStrings.Class">
            <summary>
              Looks up a localized string similar to class.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CodeStrings.ExampleHeaderSummaryForDestructor">
            <summary>
              Looks up a localized string similar to Finalizes an instance of the &lt;see cref=&quot;{0}&quot; /&gt; class.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CodeStrings.ExampleHeaderSummaryForInstanceConstructor">
            <summary>
              Looks up a localized string similar to Initializes a new instance of the &lt;see cref=&quot;{0}&quot; /&gt; {1}.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CodeStrings.ExampleHeaderSummaryForPrivateInstanceConstructor">
            <summary>
              Looks up a localized string similar to Prevents a default instance of the &lt;see cref=&quot;{0}&quot; /&gt; {1} from being created.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CodeStrings.ExampleHeaderSummaryForStaticConstructor">
            <summary>
              Looks up a localized string similar to Initializes static members of the &lt;see cref=&quot;{0}&quot; /&gt; {1}.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CodeStrings.HeaderSummaryForBooleanGetAccessor">
            <summary>
              Looks up a localized string similar to Gets a value indicating whether.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CodeStrings.HeaderSummaryForBooleanGetAndSetAccessor">
            <summary>
              Looks up a localized string similar to Gets or sets a value indicating whether.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CodeStrings.HeaderSummaryForBooleanSetAccessor">
            <summary>
              Looks up a localized string similar to Sets a value indicating whether.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CodeStrings.HeaderSummaryForDestructor">
            <summary>
              Looks up a localized string similar to Finalizes an instance of the {0} class.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CodeStrings.HeaderSummaryForGetAccessor">
            <summary>
              Looks up a localized string similar to Gets.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CodeStrings.HeaderSummaryForGetAndSetAccessor">
            <summary>
              Looks up a localized string similar to Gets or sets.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CodeStrings.HeaderSummaryForInstanceConstructor">
            <summary>
              Looks up a localized string similar to Initializes a new instance of the {0} {1}.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CodeStrings.HeaderSummaryForPrivateInstanceConstructor">
            <summary>
              Looks up a localized string similar to Prevents a default instance of the {0} {1} from being created.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CodeStrings.HeaderSummaryForSetAccessor">
            <summary>
              Looks up a localized string similar to Sets.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CodeStrings.HeaderSummaryForStaticConstructor">
            <summary>
              Looks up a localized string similar to Initializes static members of the {0} {1}.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CodeStrings.ParameterNotUsed">
            <summary>
              Looks up a localized string similar to The parameter is not used..
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CodeStrings.Struct">
            <summary>
              Looks up a localized string similar to struct.
            </summary>
        </member>
        <member name="T:StyleCop.CSharp.CommentVerifier">
            <summary>
            Contains helper methods for verifying the validity and style of comments.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CommentVerifier.MinimumCharacterPercentage">
            <summary>
            The minimum number of characters in a valid comment.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CommentVerifier.MinimumHeaderCommentLength">
            <summary>
            The minimum length for a valid comment.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.CommentVerifier.ExtractTextFromCommentXml(System.Xml.XmlNode,System.String@,System.String@)">
            <summary>
            Extracts text from a comment Xml, including special values in attributes.
            </summary>
            <param name="commentXml">
            The comment Xml.
            </param>
            <param name="textWithAttributesRemoved">
            The text from the XmlNode with all attributes values and code elements removed.
            </param>
            <param name="textWithAttributesPreserved">
            The text with all attribute and code elements inserted into text.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.CommentVerifier.IsGarbageComment(System.String,System.String,StyleCop.CSharp.CsElement,System.String@)">
            <summary>
            Checks the contents of the given comment string to determine whether the comment appears
            to be a valid English-language sentence, or whether it appears to be garbage.
            </summary>
            <param name="commentWithAttributesRemoved">
            The comment to check (which has had its attributes removed).
            </param>
            <param name="commentWithAttributesPreserved">
            The comment to check with attribute values inserted into the text.
            </param>
            <param name="element">
            The element containing the text we're checking.
            </param>
            <param name="spellingError">
            Returns the first word encountered as a spelling error.
            </param>
            <returns>
            Returns the type of the comment.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.CommentVerifier.IsGarbageComment(System.Xml.XmlNode,StyleCop.CSharp.CsElement,System.String@)">
            <summary>
            Checks the contents of the given comment string to determine whether the comment appears
            to be a valid English-language sentence, or whether it appears to be garbage.
            </summary>
            <param name="commentXml">
            The comment to check.
            </param>
            <param name="element">
            The element containing the text we're checking.
            </param>
            <param name="spellingError">
            Returns the first word encountered as a spelling error.
            </param>
            <returns>
            Returns the type of the comment.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.CommentVerifier.IsSpelledCorrectly(StyleCop.Spelling.NamingService,System.String,System.String@)">
            <summary>
            Returns true if the word is spelled correctly.
            </summary>
            <param name="namingService">
            The naming service to use.
            </param>
            <param name="word">
            The word to check.
            </param>
            <param name="hint">
            A message indicating why the word isn't spelled correctly, or <see langword="null"/> if there is none.
            </param>
            <returns>
            True if spelled correctly; otherwise, False.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.CommentVerifier.TextContainsIncorectSpelling(StyleCop.CSharp.CsElement,System.String,System.String@)">
            <summary>
            Returns True if the text has incorrect spelling.
            </summary>
            <param name="element">
            The element containing the text we're checking.
            </param>
            <param name="text">
            The text to check.
            </param>
            <param name="spellingError">
            Returns a comma separated list of words encountered as spelling errors.
            </param>
            <returns>
            True if the text contains an incorrect spelling.
            </returns>
        </member>
        <member name="T:StyleCop.CSharp.CompanyInformation">
            <summary>
            Allows setting the company and copyright requirements.
            </summary>
            <content>
            Designer information for the CompanyInformation class.
            </content>
        </member>
        <member name="F:StyleCop.CSharp.CompanyInformation.analyzer">
            <summary>
            The analyzer that this settings page is attached to.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CompanyInformation.dirty">
            <summary>
            True if the page is dirty.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CompanyInformation.tabControl">
            <summary>
            The tab control which hosts this page.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.CompanyInformation.#ctor">
            <summary>
            Initializes a new instance of the CompanyInformation class.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.CompanyInformation.#ctor(StyleCop.CSharp.DocumentationRules)">
            <summary>
            Initializes a new instance of the CompanyInformation class.
            </summary>
            <param name="analyzer">
            The analyzer that this settings page is attached to.
            </param>
        </member>
        <member name="P:StyleCop.CSharp.CompanyInformation.Dirty">
            <summary>
            Gets or sets a value indicating whether any data on the page is dirty.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.CompanyInformation.TabName">
            <summary>
            Gets the name of the the tab.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.CompanyInformation.Activate(System.Boolean)">
            <summary>
            Called when the page is activated.
            </summary>
            <param name="activated">
            Indicates whether the page is being activated or deactivated.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.CompanyInformation.Apply">
            <summary>
            Saves the data and clears the dirty flag.
            </summary>
            <returns>Returns true if the data is saved, false if not.</returns>
        </member>
        <member name="M:StyleCop.CSharp.CompanyInformation.Initialize(StyleCop.PropertyControl)">
            <summary>
            Initializes the page.
            </summary>
            <param name="propertyControl">
            The tab control object.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.CompanyInformation.PostApply(System.Boolean)">
            <summary>
            Called after all pages have been applied.
            </summary>
            <param name="wasDirty">
            The dirty state of the page before it was applied.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.CompanyInformation.PreApply">
            <summary>
            Called before all pages are applied.
            </summary>
            <returns>Returns false if no pages should be applied.</returns>
        </member>
        <member name="M:StyleCop.CSharp.CompanyInformation.RefreshSettingsOverrideState">
            <summary>
            Refreshes the bold state of items on the page.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.CompanyInformation.CheckBoxCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the checkbox is checked or unchecked.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.CompanyInformation.CompanyNameTextChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the company name text is changed.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.CompanyInformation.CopyrightTextChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the copyright text is changed.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.CompanyInformation.DetectBoldState">
            <summary>
            Detects the bold state of the controls.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.CompanyInformation.DetectCompanyNameBoldState">
            <summary>
            Detects the bold state of the company name text box.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.CompanyInformation.DetectCopyrightBoldState">
            <summary>
            Detects the bold state of the copyright text box.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.CompanyInformation.InitializeSettings">
            <summary>
            Initializes the settings on the page.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.CompanyInformation.SetBoldState(System.Windows.Forms.TextBox,System.Boolean)">
            <summary>
            Sets the bold state of the item.
            </summary>
            <param name="item">
            The item to set.
            </param>
            <param name="bold">
            The bold state.
            </param>
        </member>
        <member name="F:StyleCop.CSharp.CompanyInformation.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CompanyInformation.checkBox">
            <summary>
            The check box.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CompanyInformation.companyNameLabel">
            <summary>
            The company name label.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CompanyInformation.copyrightLabel">
            <summary>
            The copyright label.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CompanyInformation.companyName">
            <summary>
            The company name text box.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.CompanyInformation.copyright">
            <summary>
            The copyright text box.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.CompanyInformation.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">Returns true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:StyleCop.CSharp.CompanyInformation.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:StyleCop.CSharp.ReadabilityRules">
            <summary>
            Checks rules which improve readability in the code.
            </summary>
            <summary>
            The readability rules.
            </summary>
            <content>
            Checks rules related to comments.
            </content>
            <summary>
            The readability rules.
            </summary>
            <content>
            Checks rules related to placement of method parameters.
            </content>
            <summary>
            The readability rules.
            </summary>
            <content>Checks rules related to class member calls.</content>
            <summary>
            The readability rules.
            </summary>
            <content>
            Checks rules related to formatting of statements.
            </content>
            <summary>
            The readability rules.
            </summary>
            <content>
            Checks rules related to formatting of query expressions.
            </content>
        </member>
        <member name="F:StyleCop.CSharp.ReadabilityRules.builtInTypes">
            <summary>
            The built-in type aliases for C#.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.AnalyzeDocument(StyleCop.CodeDocument)">
            <summary>
            Checks the methods within the given document.
            </summary>
            <param name="document">
            The document to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.DoAnalysis(StyleCop.CodeDocument)">
            <inheritdoc />
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.IsConstVariableDeclaration(StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Determines whether the statement is declaring a constant field or variable.
            </summary>
            <param name="assignmentOperator">
            The assignment operator for the variable declaration.
            </param>
            <returns>
            Returns true if the statement is declaring a constant, false otherwise.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.IsMethodParameterDeclaration(StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Determines whether the node is part of a method parameter.
            </summary>
            <param name="node">
            The node to check to see if its part of a method parameter.
            </param>
            <returns>
            Returns true if the node is part of a method parameter, false otherwise.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckBuiltInType(StyleCop.Node{StyleCop.CSharp.CsToken},StyleCop.CSharp.CsDocument)">
            <summary>
            Checks a type to determine whether it should use one of the built-in types.
            </summary>
            <param name="type">
            The type to check.
            </param>
            <param name="document">
            The parent document.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckBuiltInTypeForMemberAccessExpressions(StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks a type to determine whether it should use one of the built-in types.
            </summary>
            <param name="type">
            The type to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckEmptyString(StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks a string to determine whether it is using an incorrect empty string notation.
            </summary>
            <param name="stringNode">
            The node containing the string to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckForRegionsInElement(StyleCop.CSharp.CsElement,StyleCop.CSharp.ReadabilityRules.Settings)">
            <summary>
            Processes the given element.
            </summary>
            <param name="element">
            The element being visited.
            </param>
            <param name="settings">
            The settings.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckShorthandForNullableTypes(StyleCop.CSharp.CsToken)">
            <summary>
            Checks the generic type uses the shorthand declaration format.
            </summary>
            <param name="type">
            The <see cref="T:StyleCop.CSharp.CsToken"/> to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckReadableConditions(StyleCop.CSharp.CsElement)">
            <summary>
            Checks that comparisons are not in reverse (value first) order.
            </summary>
            <param name="element">
            The element to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.IterateTokenList(StyleCop.CSharp.CsDocument,StyleCop.CSharp.ReadabilityRules.Settings)">
            <summary>
            Checks the built-in types and empty strings within a document.
            </summary>
            <param name="document">
            The document containing the tokens.
            </param>
            <param name="settings">
            The current settings.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.ProcessElement(StyleCop.CSharp.CsElement,StyleCop.CSharp.CsElement,System.Object)">
            <summary>
            Checks the given element.
            </summary>
            <param name="element">
            The element being visited.
            </param>
            <param name="parentElement">
            The parent element, if any.
            </param>
            <param name="context">
            The optional visitor context data.
            </param>
            <returns>
            Returns true to continue, or false to stop the walker.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.ProcessExpression(StyleCop.CSharp.Expression,StyleCop.CSharp.Expression,StyleCop.CSharp.Statement,StyleCop.CSharp.CsElement,System.Object)">
            <summary>
            Checks the given expression.
            </summary>
            <param name="expression">
            The expression being visited.
            </param>
            <param name="parentExpression">
            The parent expression, if any.
            </param>
            <param name="parentStatement">
            The parent statement, if any.
            </param>
            <param name="parentElement">
            The parent element, if any.
            </param>
            <param name="context">
            The optional visitor context data.
            </param>
            <returns>
            Returns true to continue, or false to stop the walker.
            </returns>
        </member>
        <member name="T:StyleCop.CSharp.ReadabilityRules.Settings">
            <summary>
            The settings for rules.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.ReadabilityRules.Settings.DoNotPlaceRegionsWithinElements">
            <summary>
            Indicates whether the DoNotPlaceRegionsWithinElements rule is enabled.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.ReadabilityRules.Settings.DoNotUseRegions">
            <summary>
            Indicates whether the DoNotUseRegions rule is enabled.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckForEmptyComments(StyleCop.CSharp.DocumentRoot)">
            <summary>
            Looks for empty comments.
            </summary>
            <param name="element">
            The element to process.
            </param>
        </member>
        <member name="T:StyleCop.CSharp.ReadabilityRules.IArgumentList">
            <summary>
            Represents a list of arguments.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.ReadabilityRules.IArgumentList.Count">
            <summary>
            Gets the number of arguments in the list.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.IArgumentList.Location(System.Int32)">
            <summary>
            Gets the location of one of the arguments in the list.
            </summary>
            <param name="index">
            The index of an argument in the list.
            </param>
            <returns>
            Returns the location of the arguments.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.IArgumentList.MaySpanMultipleLines(System.Int32)">
            <summary>
            Indicates whether an argument is allowed to span across multiple lines.
            </summary>
            <param name="index">
            The index of an argument in the list.
            </param>
            <returns>
            Returns true if the argument is allowed to span across multiple lines.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.IArgumentList.Tokens(System.Int32)">
            <summary>
            Gets the token list for one of the arguments in the list.
            </summary>
            <param name="index">
            The index of an argument in the list.
            </param>
            <returns>
            Returns the list of tokens for the argument.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.DetermineMethodParameterPlacementScheme(StyleCop.CSharp.ReadabilityRules.IArgumentList,System.Boolean@,System.Boolean@)">
            <summary>
            Determines whether a method's parameters share lines or are on different lines.
            </summary>
            <param name="arguments">
            The method arguments.
            </param>
            <param name="someParametersShareLine">
            Returns true if some of the parameters are on the same line.
            </param>
            <param name="someParameterOnDifferentLines">
            Returns true if some of the parameters are on different lines.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.GetArgumentListTokens(StyleCop.CSharp.CsTokenList,StyleCop.Node{StyleCop.CSharp.CsToken},StyleCop.CSharp.CsTokenType,StyleCop.CSharp.CsTokenType)">
            <summary>
            Gets the tokens forming the argument list for a method call.
            </summary>
            <param name="tokens">
            The tokens forming the method call.
            </param>
            <param name="methodNameLastToken">
            The last token before the argument list begins.
            </param>
            <param name="openBracketType">
            The type of the opening bracket.
            </param>
            <param name="closeBracketType">
            The type of the closing bracket.
            </param>
            <returns>
            Returns the argument list or null if it cannot be found.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.GetParameterListTokens(StyleCop.CSharp.CsTokenList,StyleCop.CSharp.CsTokenType,StyleCop.CSharp.CsTokenType)">
            <summary>
            Gets the tokens forming the parameter list for a method declaration.
            </summary>
            <param name="tokens">
            The tokens forming the method declaration.
            </param>
            <param name="openBracketType">
            The type of the opening bracket.
            </param>
            <param name="closeBracketType">
            The type of the closing bracket.
            </param>
            <returns>
            Returns the parameter list or null if it cannot be found.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.MeasureCommentLinesAfter(StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Measures the number of lines taken up by comments after the start token before the first word.
            </summary>
            <param name="start">
            The start token.
            </param>
            <returns>
            Returns the number of lines takes up by comments.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.MeasureCommentLinesBetween(StyleCop.Node{StyleCop.CSharp.CsToken},StyleCop.Node{StyleCop.CSharp.CsToken},System.Boolean)">
            <summary>
            Measures the number of lines taken up by comments between two tokens.
            </summary>
            <param name="start">
            The start token.
            </param>
            <param name="end">
            The end token.
            </param>
            <param name="includeAttributes">
            Indicates whether to also count attributes.
            </param>
            <returns>
            Returns the number of lines takes up by comments.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.ParameterPrewordOffset(StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Determines the amount of offset to add to the line number of the next parameter
            for a comment or attribute. 
            </summary>
            <param name="tokenNode">
            The token node.
            </param>
            <returns>
            Returns the amount of offset to add.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckIndexerAccessParameters(StyleCop.CSharp.CsElement,StyleCop.CSharp.ArrayAccessExpression)">
            <summary>
            Checks an array access expression to make that the parameters are positioned correctly.
            </summary>
            <param name="element">
            The element containing the expression.
            </param>
            <param name="expression">
            The expression to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckMethodArgumentList(StyleCop.CSharp.CsElement,StyleCop.CSharp.ReadabilityRules.IArgumentList,StyleCop.Node{StyleCop.CSharp.CsToken},System.Int32,System.String)">
            <summary>
            Checks the argument list to a method or method invocation to ensure that the arguments are 
            positioned correctly.
            </summary>
            <param name="element">
            The element containing the expression.
            </param>
            <param name="arguments">
            The arguments to the method.
            </param>
            <param name="openingBracketNode">
            The opening bracket token.
            </param>
            <param name="methodLineNumber">
            The line number on which the method begins.
            </param>
            <param name="friendlyTypeText">
            The text to use for the type in reporting violations.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckMethodClosingBracket(StyleCop.CSharp.CsElement,StyleCop.CSharp.CsTokenList,StyleCop.Node{StyleCop.CSharp.CsToken},StyleCop.CSharp.CsTokenType,StyleCop.CSharp.ReadabilityRules.IArgumentList)">
            <summary>
            Checks a method or method invocation to ensure that the closing bracket is
            on the same line as the last parameter.
            </summary>
            <param name="element">
            The element containing the expression.
            </param>
            <param name="parameterListTokens">
            The tokens that form the parameter list.
            </param>
            <param name="openingBracketNode">
            The opening bracket.
            </param>
            <param name="closingBracketType">
            The type of the closing bracket.
            </param>
            <param name="arguments">
            The arguments to the method.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckMethodInvocationParameters(StyleCop.CSharp.CsElement,StyleCop.CSharp.MethodInvocationExpression)">
            <summary>
            Checks a method invocation expression to make that the parameters are positioned correctly.
            </summary>
            <param name="element">
            The element containing the expression.
            </param>
            <param name="expression">
            The expression to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckMethodOpeningBracket(StyleCop.CSharp.CsElement,StyleCop.CSharp.CsTokenList,StyleCop.CSharp.CsTokenType,System.String)">
            <summary>
            Checks a method or method invocation to ensure that the opening bracket is
            on the same line as the method declaration.
            </summary>
            <param name="element">
            The element containing the expression.
            </param>
            <param name="parameterListTokens">
            The tokens in the parameter list.
            </param>
            <param name="openingBracketType">
            The type of the bracket that opens the parameter list.
            </param>
            <param name="textToUseForContainingElement">
            The text to use in the violation.
            </param>
            <returns>
            Returns the opening bracket.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckMethodParameters(StyleCop.CSharp.CsElement)">
            <summary>
            Processes the given element.
            </summary>
            <param name="element">
            The element being visited.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckParameters(StyleCop.CSharp.CsElement,StyleCop.CSharp.CsTokenList,StyleCop.CSharp.ReadabilityRules.IArgumentList,System.Int32,StyleCop.CSharp.CsTokenType,StyleCop.CSharp.CsTokenType,System.String)">
            <summary>
            Checks the placement and formatting of parameters to a method invocation or a method declaration.
            </summary>
            <param name="element">
            The element.
            </param>
            <param name="parameterListTokens">
            The tokens that form the parameter list.
            </param>
            <param name="methodArguments">
            The arguments or parameters to the method.
            </param>
            <param name="methodStartLineNumber">
            The line number on which the method begins.
            </param>
            <param name="openBracketType">
            The type of the parameter list opening bracket.
            </param>
            <param name="closeBracketType">
            The type of the parameter list closing bracket.
            </param>
            <param name="friendlyTypeText">
            The text to use for violations.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckSplitMethodArgumentList(StyleCop.CSharp.CsElement,StyleCop.CSharp.ReadabilityRules.IArgumentList,StyleCop.Node{StyleCop.CSharp.CsToken},System.String)">
            <summary>
            Checks the positioning of method parameters which are split across multiple lines.
            </summary>
            <param name="element">
            The element.
            </param>
            <param name="arguments">
            The method arguments.
            </param>
            <param name="openingBracketNode">
            The opening bracket token.
            </param>
            <param name="friendlyTypeText">
            The friendly type text to use in reporting violations.
            </param>
        </member>
        <member name="T:StyleCop.CSharp.ReadabilityRules.ArgumentList">
            <summary>
            Represents a list of arguments.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.ReadabilityRules.ArgumentList.arguments">
            <summary>
            The list of arguments.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.ArgumentList.#ctor(System.Collections.Generic.IList{StyleCop.CSharp.Argument})">
            <summary>
            Initializes a new instance of the ArgumentList class.
            </summary>
            <param name="arguments">
            The list of arguments.
            </param>
        </member>
        <member name="P:StyleCop.CSharp.ReadabilityRules.ArgumentList.Count">
            <summary>
            Gets the number of arguments in the list.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.ArgumentList.Location(System.Int32)">
            <summary>
            Gets the location of one of the arguments in the list.
            </summary>
            <param name="index">
            The index of an argument in the list.
            </param>
            <returns>
            Returns the location of the arguments.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.ArgumentList.MaySpanMultipleLines(System.Int32)">
            <summary>
            Indicates whether an argument is allowed to span across multiple lines.
            </summary>
            <param name="index">
            The index of an argument in the list.
            </param>
            <returns>
            Returns true if the argument is allowed to span across multiple lines.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.ArgumentList.Tokens(System.Int32)">
            <summary>
            Gets the token list for one of the arguments in the list.
            </summary>
            <param name="index">
            The index of an argument in the list.
            </param>
            <returns>
            Returns the list of tokens for the argument.
            </returns>
        </member>
        <member name="T:StyleCop.CSharp.ReadabilityRules.ParameterList">
            <summary>
            Represents a list of parameters.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.ReadabilityRules.ParameterList.parameters">
            <summary>
            The list of parameters.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.ParameterList.#ctor(System.Collections.Generic.IList{StyleCop.CSharp.Parameter})">
            <summary>
            Initializes a new instance of the ParameterList class.
            </summary>
            <param name="parameters">
            The list of parameters.
            </param>
        </member>
        <member name="P:StyleCop.CSharp.ReadabilityRules.ParameterList.Count">
            <summary>
            Gets the number of parameters in the list.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.ParameterList.Location(System.Int32)">
            <summary>
            Gets the location of one of the parameters in the list.
            </summary>
            <param name="index">
            The index of a parameter in the list.
            </param>
            <returns>
            Returns the location of the parameters.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.ParameterList.MaySpanMultipleLines(System.Int32)">
            <summary>
            Indicates whether a parameter is allowed to span across multiple lines.
            </summary>
            <param name="index">
            The index of a parameter in the list.
            </param>
            <returns>
            Returns true if the parameter is allowed to span across multiple lines.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.ParameterList.Tokens(System.Int32)">
            <summary>
            Gets the token list for one of the parameters in the list.
            </summary>
            <param name="index">
            The index of a parameter in the list.
            </param>
            <returns>
            Returns the list of tokens for the parameter.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.DelayAnalysis(StyleCop.CodeDocument,System.Int32)">
            <summary>
            Returns a value indicating whether to delay analysis of this document until the next pass.
            </summary>
            <param name="document">
            The document to analyze. 
            </param>
            <param name="passNumber">
            The current pass number. 
            </param>
            <returns>
            Returns true if analysis should be delayed. 
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.ContainsVariable(StyleCop.CSharp.VariableCollection,System.String,StyleCop.CSharp.CsToken)">
            <summary>
            Determines whether a matching local variable is contained in the given variable list.
            </summary>
            <param name="variables">
            The variable list. 
            </param>
            <param name="word">
            The variable name to check. 
            </param>
            <param name="item">
            The token containing the variable name. 
            </param>
            <returns>
            Returns true if there is a matching local variable. 
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.IsLiteralTokenPrecededByMemberAccessSymbol(StyleCop.Node{StyleCop.CSharp.CsToken},StyleCop.MasterList{StyleCop.CSharp.CsToken})">
            <summary>
            Determines whether the given token is preceded by a member access symbol.
            </summary>
            <param name="literalTokenNode">
            The token to check. 
            </param>
            <param name="masterList">
            The list containing the token. 
            </param>
            <returns>
            Returns true if the token is preceded by a member access symbol. 
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.IsLocalMember(System.String,StyleCop.CSharp.CsToken,StyleCop.CSharp.ICodeUnit)">
            <summary>
            Determines whether the given word is the name of a local variable.
            </summary>
            <param name="word">
            The name to check. 
            </param>
            <param name="item">
            The token containing the word. 
            </param>
            <param name="parent">
            The code unit that the word appears in. 
            </param>
            <returns>
            True if the word is the name of a local variable, false if not. 
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.IsObjectInitializerLeftHandSideExpression(StyleCop.CSharp.Expression)">
            <summary>
            Determines whether the given expression is the left-hand-side literal in any of the assignment expressions within an object initialize expression.
            </summary>
            <param name="expression">
            The expression to check. 
            </param>
            <returns>
            Returns true if the expression is the left-hand-side literal in any of the assignment expressions within an object initializer expression. 
            </returns>
            <remarks>
            This method checks for the following situation:
            <code>
            class MyClass { public bool Member { get { return true; } } public void SomeMethod() { MyObjectType someObject = new MyObjectType { Member = this.Member }; } } 
            </code>
            In this case, StyleCop will raise a violation since it looks like the Member token should be prefixed by 'this.', however, it is actually referring to a property on the MyObjectType type.
            </remarks>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.IsThisRequiredFromMemberList(StyleCop.CSharp.Expression,StyleCop.CSharp.ClassBase,System.Collections.Generic.IEnumerable{StyleCop.CSharp.CsElement},System.Collections.Generic.IEnumerable{StyleCop.CSharp.CsElement},System.String)">
            <summary>
            Checks a token to see if it should be prefixed (with this. or maybe another prefix).
            </summary>
            <param name="expression">
            The expression the word appears within.
            </param>
            <param name="parentClass">
            The parent class that this element belongs to.
            </param>
            <param name="matchesForPassedMethod">
            Matches for the passed-in version of the member name.
            </param>
            <param name="matchesForGenericMethod">
            The matches for the generic version of the member name.
            </param>
            <param name="memberName">
            The name of the member to check.
            </param>
            <returns>
            True if the prefix is required otherwise false.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.IsThisRequiredFromMemberList(System.Collections.Generic.IEnumerable{StyleCop.CSharp.CsElement})">
            <summary>
            Checks a token to see if it should be prefixed (with this. or maybe another prefix).
            </summary>
            <param name="matchesForPassedMethod">
            Matches for the passed-in version of the member name.
            </param>
            <returns>
            True if the prefix is required otherwise false.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckClassMemberRulesForElements(StyleCop.CSharp.CsElement,StyleCop.CSharp.ClassBase,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{StyleCop.CSharp.CsElement}})">
            <summary>
            Checks the items within the given element.
            </summary>
            <param name="element">
            The element to check. 
            </param>
            <param name="parentClass">
            The class that the element belongs to. 
            </param>
            <param name="members">
            The collection of members of the parent class. 
            </param>
            <returns>
            Returns false if the analyzer should quit. 
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckClassMemberRulesForExpression(StyleCop.CSharp.Expression,StyleCop.CSharp.Expression,StyleCop.CSharp.CsElement,StyleCop.CSharp.ClassBase,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{StyleCop.CSharp.CsElement}})">
            <summary>
            Parses the given expression.
            </summary>
            <param name="expression">
            The expression. 
            </param>
            <param name="parentExpression">
            The parent expression, if there is one. 
            </param>
            <param name="parentElement">
            The element that contains the expressions. 
            </param>
            <param name="parentClass">
            The class that the element belongs to. 
            </param>
            <param name="members">
            The collection of members of the parent class. 
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckClassMemberRulesForExpressions(System.Collections.Generic.IEnumerable{StyleCop.CSharp.Expression},StyleCop.CSharp.Expression,StyleCop.CSharp.CsElement,StyleCop.CSharp.ClassBase,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{StyleCop.CSharp.CsElement}})">
            <summary>
            Parses the list of expressions.
            </summary>
            <param name="expressions">
            The list of expressions. 
            </param>
            <param name="parentExpression">
            The parent expression, if there is one. 
            </param>
            <param name="parentElement">
            The element that contains the expressions. 
            </param>
            <param name="parentClass">
            The class that the element belongs to. 
            </param>
            <param name="members">
            The collection of members of the parent class. 
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckClassMemberRulesForLiteralToken(StyleCop.Node{StyleCop.CSharp.CsToken},StyleCop.CSharp.Expression,StyleCop.CSharp.Expression,StyleCop.CSharp.CsElement,StyleCop.CSharp.ClassBase,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{StyleCop.CSharp.CsElement}})">
            <summary>
            Parses the given literal token.
            </summary>
            <param name="tokenNode">
            The literal token node. 
            </param>
            <param name="expression">
            The expression that contains the token. 
            </param>
            <param name="parentExpression">
            The parent of the expression that contains the token. 
            </param>
            <param name="parentElement">
            The element that contains the expression. 
            </param>
            <param name="parentClass">
            The class that the element belongs to. 
            </param>
            <param name="members">
            The collection of members of the parent class. 
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckClassMemberRulesForStatements(System.Collections.Generic.ICollection{StyleCop.CSharp.Statement},StyleCop.CSharp.CsElement,StyleCop.CSharp.ClassBase,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{StyleCop.CSharp.CsElement}})">
            <summary>
            Parses the given statement list.
            </summary>
            <param name="statements">
            The list of statements to parse. 
            </param>
            <param name="parentElement">
            The element that contains the statements. 
            </param>
            <param name="parentClass">
            The class that the element belongs to. 
            </param>
            <param name="members">
            The collection of members of the parent class. 
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.IsBaseRequired(System.String,StyleCop.CSharp.ClassBase,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{StyleCop.CSharp.CsElement}})">
            <summary>
            Calculates whether the base prefix is required.
            </summary>
            <param name="memberName">
            The text of the method call to check. 
            </param>
            <param name="parentClass">
            The class this this member belongs to. 
            </param>
            <param name="members">
            All the members of this class. 
            </param>
            <returns>
            True if base is required otherwise false. 
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.IsThisRequired(StyleCop.Node{StyleCop.CSharp.CsToken},StyleCop.CSharp.Expression,StyleCop.CSharp.ClassBase,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{StyleCop.CSharp.CsElement}})">
            <summary>
            Checks a token to see if it should be prefixed (with this. or maybe another prefix).
            </summary>
            <param name="tokenNode">
            The TokenNode to check. 
            </param>
            <param name="expression">
            The expression the word appears within. 
            </param>
            <param name="parentClass">
            The parent class that this element belongs to. 
            </param>
            <param name="members">
            The collection of members of the parent class. 
            </param>
            <returns>
            True if the prefix is required otherwise false. 
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.GetChildBlockStatement(StyleCop.CSharp.Statement)">
            <summary>
            Gets the child block statement from the given statement. If the statement itself is a block statement,
            it will be returned instead.
            </summary>
            <param name="statement">
            The statement.
            </param>
            <returns>
            Returns the block statement or null if there is none.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.GetClosingBracketFromStatement(StyleCop.CSharp.Statement)">
            <summary>
            Gets the closing curly bracket from the block statement.
            </summary>
            <param name="statement">
            The block statement.
            </param>
            <returns>
            Returns the closing curly bracket or null if there is none.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.GetNextToken(StyleCop.Node{StyleCop.CSharp.CsToken},StyleCop.MasterList{StyleCop.CSharp.CsToken})">
            <summary>
            Gets the non-whitespace token that appears after the given token.
            </summary>
            <param name="tokenNode">
            The token node.
            </param>
            <param name="tokenList">
            The list that contains the token.
            </param>
            <returns>
            Returns the next token.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.GetOpeningCurlyBracketFromStatement(StyleCop.CSharp.Statement)">
            <summary>
            Gets the opening curly bracket from the block statement.
            </summary>
            <param name="statement">
            The block statement.
            </param>
            <returns>
            Returns the opening curly bracket or null if there is none.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.GetPreviousToken(StyleCop.Node{StyleCop.CSharp.CsToken},StyleCop.MasterList{StyleCop.CSharp.CsToken})">
            <summary>
            Gets the non-whitespace token that appears before the given token.
            </summary>
            <param name="tokenNode">
            The token node.
            </param>
            <param name="tokenList">
            The list that contains the token.
            </param>
            <returns>
            Returns the previous token.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckBlockStatementsCurlyBracketPlacement(StyleCop.CSharp.CsElement,StyleCop.CSharp.Statement)">
            <summary>
            Checks the curly bracket placement on a block statement.
            </summary>
            <param name="element">
            The element containing the statement.
            </param>
            <param name="statement">
            The statement to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckChainedStatementCurlyBracketPlacement(StyleCop.CSharp.CsElement,StyleCop.CSharp.Statement)">
            <summary>
            Checks the curly bracket placement on a statement which is chained from another statement.
            </summary>
            <param name="element">
            The element containing the statement.
            </param>
            <param name="statement">
            The statement to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckStatementCurlyBracketPlacement(StyleCop.CSharp.CsElement,StyleCop.CSharp.Statement)">
            <summary>
            Checks the curly bracket placement on a statement.
            </summary>
            <param name="element">
            The element containing the statement.
            </param>
            <param name="statement">
            The statement to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckStatementFormattingRulesForElement(StyleCop.CSharp.CsElement)">
            <summary>
            Checks the placement of statements within the given element.
            </summary>
            <param name="element">
            The element to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckStatementFormattingRulesForExpressions(StyleCop.CSharp.CsElement,System.Collections.Generic.ICollection{StyleCop.CSharp.Expression})">
            <summary>
            Checks the given list of expressions.
            </summary>
            <param name="element">
            The element containing the expressions.
            </param>
            <param name="expressions">
            The list of expressions.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckStatementFormattingRulesForStatement(StyleCop.CSharp.CsElement,StyleCop.CSharp.Statement,StyleCop.CSharp.Statement)">
            <summary>
            Checks the placement of the given statement.
            </summary>
            <param name="element">
            The element containing the statement.
            </param>
            <param name="statement">
            The statement to check.
            </param>
            <param name="previousStatement">
            The statement just before this statement.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckStatementFormattingRulesForStatements(StyleCop.CSharp.CsElement,System.Collections.Generic.ICollection{StyleCop.CSharp.Statement})">
            <summary>
            Checks the given list of statements.
            </summary>
            <param name="element">
            The element containing the statements.
            </param>
            <param name="statements">
            The list of statements.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckTokenPrecedingOrFollowingCurlyBracket(StyleCop.CSharp.CsElement,StyleCop.CSharp.CsToken)">
            <summary>
            Checks the token that follows or precedes a curly bracket in a blocked statement to verify
            that there is no comment or region embedded within the statement.
            </summary>
            <param name="element">
            The element containing the statement.
            </param>
            <param name="previousOrNextToken">
            The previous or next token.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckTrailingStatementCurlyBracketPlacement(StyleCop.CSharp.CsElement,StyleCop.CSharp.Statement)">
            <summary>
            Checks the curly at the end of a statement which trails the rest of the statement.
            </summary>
            <param name="element">
            The element containing the statement.
            </param>
            <param name="statement">
            The statement to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.CheckQueryExpression(StyleCop.CSharp.CsElement,StyleCop.CSharp.QueryExpression)">
            <summary>
            Processes the given query expression.
            </summary>
            <param name="element">
            The element that contains the expression.
            </param>
            <param name="queryExpression">
            The query expression.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ReadabilityRules.ProcessQueryClauses(StyleCop.CSharp.CsElement,StyleCop.CSharp.QueryExpression,System.Collections.Generic.ICollection{StyleCop.CSharp.QueryClause},StyleCop.CSharp.QueryClause@,System.Boolean@,System.Boolean@)">
            <summary>
            Analyzes the given query clauses.
            </summary>
            <param name="element">
            The element containing the clauses.
            </param>
            <param name="expression">
            The expression containing the clauses.
            </param>
            <param name="clauses">
            The list of clauses to analyze.
            </param>
            <param name="previousClause">
            The previous clause in the expression, if any.
            </param>
            <param name="clauseOnSameLine">
            Indicates whether any clause has been seen previously which
            starts on the same line as the clause before it.
            </param>
            <param name="clauseOnSeparateLine">
            Indicates whether any clause has been seen previously which
            starts on the line after the clause before it.
            </param>
            <returns>
            Returns true to continue checking the query clause, or false to quit.
            </returns>
        </member>
        <member name="T:StyleCop.CSharp.Rules">
            <summary>
            The list of rules triggered by this module.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.AccessModifierMustBeDeclared">
            <summary>
            The element does not have an access modifier.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.CurlyBracketsForMultiLineStatementsMustNotShareLine">
            <summary>
            The curly bracket must be on a line by itself, unless the entire statement is on a single line.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.StatementMustNotBeOnSingleLine">
            <summary>
            The statement wrapped in curly brackets must not be entirely on the same line.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ElementMustNotBeOnSingleLine">
            <summary>
            The {0} must not be placed entirely on the same line.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.CurlyBracketsMustNotBeOmitted">
            <summary>
            The body of the statement must be wrapped in curly brackets.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.AllAccessorsMustBeMultiLineOrSingleLine">
            <summary>
            If an accessor is completely on a single line, its sibling accessors must also each be on a single line.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ElementsMustBeDocumented">
            <summary>
            The Xml header is missing.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.PartialElementsMustBeDocumented">
            <summary>
            The Xml header is missing from a partial element.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ElementDocumentationMustHaveSummary">
            <summary>
            The header is missing the summary tag.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.PartialElementDocumentationMustHaveSummary">
            <summary>
            The header is missing the summary tag.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ElementDocumentationMustHaveSummaryText">
            <summary>
            The summary tag is empty.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.PartialElementDocumentationMustHaveSummaryText">
            <summary>
            The summary tag is empty.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ElementParametersMustBeDocumented">
            <summary>
            The element has parameters but the header does not contain <c>param</c> tags.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ElementParameterDocumentationMustDeclareParameterName">
            <summary>
            The header has a  <c>param</c> tag with no name.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ElementParameterDocumentationMustHaveText">
            <summary>
            The  <c>param</c> tag is empty.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ElementReturnValueMustBeDocumented">
            <summary>
            The method does not return void but the header does not have a returns tag.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ElementReturnValueDocumentationMustHaveText">
            <summary>
            The returns tag is empty.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.VoidReturnValueMustNotBeDocumented">
            <summary>
            The method returns void but the header contains a returns tag.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.GenericTypeParametersMustBeDocumented">
            <summary>
            The partial element has generic types but the Xml header has no '<c>typeparam</c>' tags.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.GenericTypeParametersMustBeDocumentedPartialClass">
            <summary>
            The documentation header must contain <c>typeparam</c> tags matching the generic types for the {0}.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.GenericTypeParameterDocumentationMustMatchTypeParameters">
            <summary>
            The element's generic type parameters do not match the '<c>typeparam</c>' tags in the header.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.GenericTypeParameterDocumentationMustDeclareParameterName">
            <summary>
            The Xml header has a '<c>typeparam</c>' tag with no 'name' attribute.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.GenericTypeParameterDocumentationMustHaveText">
            <summary>
            The element header '<c>typeparam</c>' tag is empty for the '{0}' item.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ElementDocumentationMustNotHaveDefaultSummary">
            <summary>
            The summary tag has the default text generated by Visual Studio.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.DocumentationMustContainValidXml">
            <summary>
            The header is invalid Xml.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.EnumerationItemsMustBeDocumented">
            <summary>
            The <see cref="T:StyleCop.CSharp.Enum"/> sub-item has no header.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ElementParameterDocumentationMustMatchElementParameters">
            <summary>
            The method parameters do not match those in the header.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.PropertyDocumentationMustHaveValue">
            <summary>
            The property is missing a value tag.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.PropertyDocumentationMustHaveValueText">
            <summary>
            The property has a value tag but it has no text.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.DocumentationTextMustNotBeEmpty">
            <summary>
            The text in a documentation string must not be empty.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.DocumentationTextMustEndWithAPeriod">
            <summary>
            Documentation text must end with a period.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.DocumentationTextMustBeginWithACapitalLetter">
            <summary>
            Documentation text must begin with a capital letter.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.DocumentationTextMustContainWhitespace">
            <summary>
            Documentation text must contain whitespace.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.DocumentationMustMeetCharacterPercentage">
            <summary>
            Documentation text must consist of a certain percentage of characters.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.DocumentationTextMustMeetMinimumCharacterLength">
            <summary>
            Documentation text must be a certain length.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ConstructorSummaryDocumentationMustBeginWithStandardText">
            <summary>
            The documentation text within the constructor's summary tag must begin with the text.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.DestructorSummaryDocumentationMustBeginWithStandardText">
            <summary>
            The documentation text within the destructor's summary tag must begin with the text.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.DocumentationHeadersMustNotContainBlankLines">
            <summary>
            Verifies that a documentation header does not contain blank lines.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.IncludedDocumentationFileDoesNotExist">
            <summary>
            Verifies that an included documentation header file can be loaded.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.IncludedDocumentationXPathDoesNotExist">
            <summary>
            Verifies that an included documentation tag's XPath expression is valid.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.IncludeNodeDoesNotContainValidFileAndPath">
            <summary>
            Verifies that an 'include' tag contains a valid file and path attribute.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.InheritDocMustBeUsedWithInheritingClass">
            <summary>
            Verifies that an <c>includedoc</c> tag is not used when the class does not inherit from a base class.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.PropertySummaryDocumentationMustMatchAccessors">
            <summary>
            The property's summary tag starts with invalid text.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.PropertySummaryDocumentationMustOmitSetAccessorWithRestrictedAccess">
            <summary>
            The property only has a get accessor but the summary starts with 'gets or sets'.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ElementDocumentationMustNotBeCopiedAndPasted">
            <summary>
            The element's documentation header contains two or more identical strings.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.SingleLineCommentsMustNotUseDocumentationStyleSlashes">
            <summary>
            A single line comment begins with a triple slash like an Xml header.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.FileMustHaveHeader">
            <summary>
            There is no file header.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.FileHeaderMustShowCopyright">
            <summary>
            The copyright node is missing.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.FileHeaderMustHaveCopyrightText">
            <summary>
            The copyright tag is empty.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.FileHeaderCopyrightTextMustMatch">
            <summary>
            The copyright tag must match the required value.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.FileHeaderMustContainFileName">
            <summary>
            The copyright's file attribute is missing.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.FileHeaderFileNameDocumentationMustMatchFileName">
            <summary>
            The copyright's file attribute does not contain the name of the file.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.FileHeaderMustHaveValidCompanyText">
            <summary>
            The copyright's company tag is missing or empty.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.FileHeaderCompanyNameTextMustMatch">
            <summary>
            The company text must match.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.FileHeaderMustHaveSummary">
            <summary>
            The summary tag is missing or empty.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ThisMissing">
            <summary>
            A this prefix is missing.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.BaseUsed">
            <summary>
            A base prefix was used when it should be this.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ConstFieldNamesMustBeginWithUpperCaseLetter">
            <summary>
            A constant field starts with a lower case letter.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.NonPrivateReadonlyFieldsMustBeginWithUpperCaseLetter">
            <summary>
            Readonly variables that are not declared private must start with an upper case letter.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.AccessibleFieldsMustBeginWithUpperCaseLetter">
            <summary>
            A variable starts with an upper case letter.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.FieldNamesMustBeginWithLowerCaseLetter">
            <summary>
            A variable starts with an upper case letter.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.FieldNamesMustNotUseHungarianNotation">
            <summary>
            A variable name contains Hungarian notation.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.VariableNamesMustNotBePrefixed">
            <summary>
            A variable name contains a m_ or s_ prefix.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ElementMustBeginWithLowerCaseLetter">
            <summary>
            A word that should start with a lower-case letter start with an upper-case letter.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ElementMustBeginWithUpperCaseLetter">
            <summary>
            A word that should start with an upper-case letter start with a lower-case letter.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.InterfaceNamesMustBeginWithI">
            <summary>
            An interface name does not begin with I.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.FieldNamesMustNotBeginWithUnderscore">
            <summary>
            A variable name starts with an underscore.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.FieldNamesMustNotContainUnderscore">
            <summary>
            A variable name contains an underscore.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.CodeMustNotContainMultipleBlankLinesInARow">
            <summary>
            Multiple blank lines in a row.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ClosingCurlyBracketsMustNotBePrecededByBlankLine">
            <summary>
            Blank line before an opening curly bracket.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.OpeningCurlyBracketsMustNotBePrecededByBlankLine">
            <summary>
            Blank line before an opening curly bracket.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.OpeningCurlyBracketsMustNotBeFollowedByBlankLine">
            <summary>
            Blank line after an opening curly bracket.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ClosingCurlyBracketMustBeFollowedByBlankLine">
            <summary>
            A closing curly bracket is not followed by a blank line.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.SingleLineCommentMustBePrecededByBlankLine">
            <summary>
            No blank line appears before a single-line comment.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ElementsMustBeSeparatedByBlankLine">
            <summary>
            Adjacent elements must be separated by a blank line.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ElementDocumentationHeaderMustBePrecededByBlankLine">
            <summary>
            No blank line appears before an Xml header.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ElementDocumentationHeadersMustNotBeFollowedByBlankLine">
            <summary>
            A blank line appears after an Xml header.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ChainedStatementBlocksMustNotBePrecededByBlankLine">
            <summary>
            A blank line appears after an else, catch, or finally statement.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.SingleLineCommentsMustNotBeFollowedByBlankLine">
            <summary>
            A single-line comment must not be followed by a blank line. 
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.WhileDoFooterMustNotBePrecededByBlankLine">
            <summary>
            A blank line appears before a while/do statement.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ElementsMustAppearInTheCorrectOrder">
            <summary>
            Elements in the wrong order.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.PartialElementsMustDeclareAccess">
            <summary>
            Partial elements in the wrong order.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ElementsMustBeOrderedByAccess">
            <summary>
            Access modifiers in the wrong order.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.StaticElementsMustAppearBeforeInstanceElements">
            <summary>
            Static elements in the wrong order.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.FileMayOnlyContainASingleClass">
            <summary>
            Multiple classes at the top level of a file.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.FileMayOnlyContainASingleNamespace">
            <summary>
            Multiple namespaces within a file.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.CodeAnalysisSuppressionMustHaveJustification">
            <summary>
            A Code Analysis suppression must contain a non-empty justification 
            describing the reason for the suppression.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.DebugAssertMustProvideMessageText">
            <summary>
            A call to Debug.Assert must provide a message in the second parameter describing 
            the reason for the assert.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.DebugFailMustProvideMessageText">
            <summary>
            A call to Debug.Fail must provide a message in the first parameter describing 
            the reason for the failure.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ArithmeticExpressionsMustDeclarePrecedence">
            <summary>
            Insert parenthesis within the arithmetic expression to declare the operator precedence.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ConditionalExpressionsMustDeclarePrecedence">
            <summary>
            Insert parenthesis within the conditional AND and OR expressions to declare the operator precedence.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.RemoveUnnecessaryCode">
            <summary>
            Verifies that the code does not contain empty elements or statements which can be safely removed.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.RemoveDelegateParenthesisWhenPossible">
            <summary>
            Verifies that parenthesis are removed from anonymous methods when there are no method parameters.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.FieldsMustBePrivate">
            <summary>
            Publicly exposed fields.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ConstantsMustAppearBeforeFields">
            <summary>
            Constant elements in the wrong order.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.KeywordsMustBeSpacedCorrectly">
            <summary>
            The spacing around the keyword '{0}' is invalid.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.CommasMustBeSpacedCorrectly">
            <summary>
            Invalid spacing around a comma.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.SemicolonsMustBeSpacedCorrectly">
            <summary>
            Invalid spacing around a semicolon.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.SymbolsMustBeSpacedCorrectly">
            <summary>
            Invalid spacing around a symbol.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.OpeningParenthesisMustBeSpacedCorrectly">
            <summary>
            Invalid spacing around an open parenthesis.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ClosingParenthesisMustBeSpacedCorrectly">
            <summary>
            Invalid spacing around a close parenthesis.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.OpeningSquareBracketsMustBeSpacedCorrectly">
            <summary>
            Invalid spacing around an open square bracket.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ClosingSquareBracketsMustBeSpacedCorrectly">
            <summary>
            Invalid spacing around a close square bracket.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.OpeningCurlyBracketsMustBeSpacedCorrectly">
            <summary>
            Invalid spacing around an open curly bracket.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ClosingCurlyBracketsMustBeSpacedCorrectly">
            <summary>
            Invalid spacing around a close curly bracket.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.OpeningGenericBracketsMustBeSpacedCorrectly">
            <summary>
            Invalid spacing around the opening bracket of a generic statement.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ClosingGenericBracketsMustBeSpacedCorrectly">
            <summary>
            Invalid spacing around the closing bracket of a generic statement.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.OpeningAttributeBracketsMustBeSpacedCorrectly">
            <summary>
            Invalid spacing around an open attribute bracket.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ClosingAttributeBracketsMustBeSpacedCorrectly">
            <summary>
            Invalid spacing around a close attribute bracket.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.NullableTypeSymbolsMustNotBePrecededBySpace">
            <summary>
            A <see cref="T:System.Nullable"/> type symbol should not be preceded by whitespace.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.MemberAccessSymbolsMustBeSpacedCorrectly">
            <summary>
            Invalid spacing around a member access symbol.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.IncrementDecrementSymbolsMustBeSpacedCorrectly">
            <summary>
            Invalid spacing around a decrement or increment symbol.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.NegativeSignsMustBeSpacedCorrectly">
            <summary>
            Invalid spacing around a negative sign.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.PositiveSignsMustBeSpacedCorrectly">
            <summary>
            Invalid spacing around a positive sign.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.DereferenceAndAccessOfSymbolsMustBeSpacedCorrectly">
            <summary>
            Invalid spacing around the increment or decrement symbol.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ColonsMustBeSpacedCorrectly">
            <summary>
            Invalid spacing around a colon.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.TabsMustNotBeUsed">
            <summary>
            The code contains tabs, which is not allowed.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.CodeMustNotContainMultipleWhitespaceInARow">
            <summary>
            There are multiple spaces in a row.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.CodeMustNotContainSpaceAfterNewKeywordInImplicitlyTypedArrayAllocation">
            <summary>
            There should be no space between the new keyword and the opening square bracket in 
            an implicitly typed array allocation.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.StatementMustNotUseUnnecessaryParenthesis">
            <summary>
            Too many parenthesis.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.PreprocessorKeywordsMustNotBePrecededBySpace">
            <summary>
            The preprocessor keyword must be followed by a space.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.OperatorKeywordMustBeFollowedBySpace">
            <summary>
            The operator keyword must be followed by a space.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.SingleLineCommentsMustBeginWithSingleSpace">
            <summary>
            The comment must start with a single space.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.DocumentationLinesMustBeginWithSingleSpace">
            <summary>
            The documentation header line must start with a single space.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.UsingDirectivesMustBePlacedWithinNamespace">
            <summary>
            A using statement is outside of a namespace.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.OpeningParenthesisMustBeOnDeclarationLine">
            <summary>
            The open parenthesis is not on the same line as the method call.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ClosingParenthesisMustBeOnLineOfLastParameter">
            <summary>
            The closing parenthesis is not on the same line as the last parameter.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ClosingParenthesisMustBeOnLineOfOpeningParenthesis">
            <summary>
            The closing parenthesis or bracket must be placed on the same line as the opening parenthesis or bracket.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ParameterMustNotSpanMultipleLines">
            <summary>
            The parameter spans multiple lines.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.CommaMustBeOnSameLineAsPreviousParameter">
            <summary>
            The comma must be on the same line as the previous parameter.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ParameterListMustFollowDeclaration">
            <summary>
            The parameter list must be on the same line or the next line as the method name.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ParameterMustFollowComma">
            <summary>
            The parameter must begin on the line after the previous parameter.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.SplitParametersMustStartOnLineAfterDeclaration">
            <summary>
            If there are multiple parameters and each is on it's own line, they cannot start on the same 
            line as the method declaration or name.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ParametersMustBeOnSameLineOrSeparateLines">
            <summary>
            All parameters must be on the same line, or each parameter must be on a separate line.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.CodeMustNotContainEmptyStatements">
            <summary>
            The statement is empty.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.CodeMustNotContainMultipleStatementsOnOneLine">
            <summary>
            A line may only contain a single statement.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.BlockStatementsMustNotContainEmbeddedComments">
            <summary>
            A block statement may not contain a comment embedded within the statement.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.BlockStatementsMustNotContainEmbeddedRegions">
            <summary>
            A block statement may not contain a region embedded within the statement.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.DoNotPrefixCallsWithBaseUnlessLocalImplementationExists">
            <summary>
            The call to {0} can only use 'base.' if there is a local override and the caller is explicitly calling the base implementation.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.PrefixLocalCallsWithThis">
            <summary>
            The class member {0} does not start with 'this'.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.DeclarationKeywordsMustFollowOrder">
            <summary>
            The {0} keyword must come before the {1} keyword in the element declaration.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ProtectedMustComeBeforeInternal">
            <summary>
            The keyword 'protected' must come before 'internal'.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.SystemUsingDirectivesMustBePlacedBeforeOtherUsingDirectives">
            <summary>
            Verifies that all using directives within the System namespace are placed before all other using directives.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.UsingAliasDirectivesMustBePlacedAfterOtherUsingDirectives">
            <summary>
            Verifies that all using alias directives are placed after all using namespace directives.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.UsingDirectivesMustBeOrderedAlphabeticallyByNamespace">
            <summary>
            Verifies that using directives are sorted alphabetically by the namespaces.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.UsingAliasDirectivesMustBeOrderedAlphabeticallyByAliasName">
            <summary>
            Verifies that using alias directives are sorted alphabetically by the alias names.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.PropertyAccessorsMustFollowOrder">
            <summary>
            Verifies that get accessors are placed before set accessors within properties and indexers.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.EventAccessorsMustFollowOrder">
            <summary>
            Verifies that add accessors are placed before remove accessors within events.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.CommentsMustContainText">
            <summary>
            Empty comments are not allowed.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.QueryClauseMustFollowPreviousClause">
            <summary>
            The query clause must begin on the line following the previous clause.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.QueryClausesMustBeOnSeparateLinesOrAllOnOneLine">
            <summary>
            All query clauses must be placed on the same line, or each clause must begin on a new line.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.QueryClauseMustBeginOnNewLineWhenPreviousClauseSpansMultipleLines">
            <summary>
            A query clause must begin on a new line if the previous clause spans multiple lines.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.QueryClausesSpanningMultipleLinesMustBeginOnOwnLine">
            <summary>
            If a query clause spans multiple lines, it must begin on its own line.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.UseBuiltInTypeAlias">
            <summary>
            Enforces the use of the built-in <see cref="T:System.Boolean"/> keyword rather than the type Boolean or System.Boolean.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.AvoidVarType">
            <summary>
            Prohibits the use of the <c>var</c> type outside of query expressions and anonymous types.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.UseShorthandForNullableTypes">
            <summary>
            Enforces the use of the shorthand for a <see cref="T:System.Nullable"/> type.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.UseStringEmptyForEmptyStrings">
            <summary>
            Use the String.Empty property rather than "".
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.DoNotPlaceRegionsWithinElements">
            <summary>
            Prevents the use of regions within code elements, which limits code readability.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.DoNotUseRegions">
            <summary>
            Prevents the use of regions anywhere within the code.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.CodeMustNotContainBlankLinesAtStartOfFile">
            <summary>
            The code must not contain blank lines at the start of the file.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.CodeMustNotContainBlankLinesAtEndOfFile">
            <summary>
            The code must not contain blank lines at the end of the file.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.AttributeConstructorMustNotUseUnnecessaryParenthesis">
            <summary>
            Prevents the use of parenthesis on attribute constructors when they are not required.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.FileHeaderFileNameDocumentationMustMatchTypeName">
            <summary>
            Ensures the file header filename attribute matches the name of the type in the file.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.StaticReadonlyElementsMustAppearBeforeStaticNonReadonlyElements">
            <summary>
            Validates that all static readonly elements are placed before all static non-readonly elements of the same type.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.InstanceReadonlyElementsMustAppearBeforeInstanceNonReadonlyElements">
            <summary>
            Validates that all non-static readonly elements are placed before non-static non-readonly elements of the same type.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.UseReadableConditions">
            <summary>
            Validates that C++ style assignment proof comparison where value goes first is not used.
            </summary>       
        </member>
        <member name="F:StyleCop.CSharp.Rules.PrefixCallsCorrectly">
            <summary>
            Verifies that calls to members are prefixed with the correct notation.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.StaticReadonlyFieldsMustBeginWithUpperCaseLetter">
            <summary>
            A static readonly variable starts with an upper case letter.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.ElementDocumentationMustBeSpelledCorrectly">
            <summary>
            An elements documentation must be spelled correctly.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.DoNotSplitNullConditionalOperators">
            <summary>
            Null conditional operator must not be split by new row or space.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.Rules.UsingStaticDirectivesMustBePlacedAtTheCorrectLocation">
            <summary>
            Verifies that all using static directives are placed after using namespace directives.
            </summary>
        </member>
        <member name="T:StyleCop.CSharp.SpacingRules">
            <summary>
            Tracks spacing in a piece of code.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.AnalyzeDocument(StyleCop.CodeDocument)">
            <summary>
            Checks the spacing of items within the given document.
            </summary>
            <param name="document">
            The document to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.DoAnalysis(StyleCop.CodeDocument)">
            <inheritdoc />
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.IsAllowedAfterClosingParenthesis(StyleCop.CSharp.CsToken)">
            <summary>
            Determines whether the type of the given token is allowed
            to appear after a closing parenthesis, with no space between
            the parenthesis and the token.
            </summary>
            <param name="token">
            The token to check.
            </param>
            <returns>
            True if it is allowed; false otherwise.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.IsTokenADot(StyleCop.CSharp.CsToken)">
            <summary>
            Compares the token to the Operator symbol and to a dot '.'.
            </summary>
            <param name="token">
            The token to check.
            </param>
            <returns>
            True is the token is an operator and a dot '.', otherwise false.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckAttributeTokenCloseBracket(StyleCop.MasterList{StyleCop.CSharp.CsToken},StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks a closing attribute bracket for spacing.
            </summary>
            <param name="tokens">
            The list of tokens being parsed.
            </param>
            <param name="tokenNode">
            The token to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckAttributeTokenOpenBracket(StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks a open attribute bracket for spacing.
            </summary>
            <param name="tokenNode">
            The token to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckCloseCurlyBracket(StyleCop.MasterList{StyleCop.CSharp.CsToken},StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks a close bracket for spacing.
            </summary>
            <param name="tokens">
            The list of tokens being parsed.
            </param>
            <param name="tokenNode">
            The token to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckCloseParen(StyleCop.MasterList{StyleCop.CSharp.CsToken},StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks a close parenthesis for spacing.
            </summary>
            <param name="tokens">
            The list of tokens being parsed.
            </param>
            <param name="tokenNode">
            The token to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckCloseSquareBracket(StyleCop.MasterList{StyleCop.CSharp.CsToken},StyleCop.Node{StyleCop.CSharp.CsToken},StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks a close bracket for spacing.
            </summary>
            <param name="tokens">
            The list of tokens being parsed.
            </param>
            <param name="tokenNode">
            The token to check.
            </param>
            <param name="parentTokenNode">
            The parent token of the token node being checked.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckGenericSpacing(StyleCop.MasterList{StyleCop.CSharp.CsToken},StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks the spacing of the tokens within the given generic type token.
            </summary>
            <param name="tokens">
            The master list of tokens.
            </param>
            <param name="genericTokenNode">
            The generic type token to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckGenericTokenCloseBracket(StyleCop.Node{StyleCop.CSharp.CsToken},StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks a closing generic bracket for spacing.
            </summary>
            <param name="closeBracketTokenNode">
            The token to check.
            </param>
            <param name="genericTokenNode">
            The generic token which is the parent of the close bracket.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckGenericTokenOpenBracket(StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks a open generic bracket for spacing.
            </summary>
            <param name="tokenNode">
            The token to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckIncrementDecrement(StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks an increment or decrement sign for spacing.
            </summary>
            <param name="tokenNode">
            The token to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckKeywordWithSpace(StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks a keyword that should be followed by a space.
            </summary>
            <param name="tokenNode">
            The token node to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckKeywordWithoutSpace(StyleCop.MasterList{StyleCop.CSharp.CsToken},StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks a keyword that should not be followed by a space.
            </summary>
            <param name="tokens">
            The list of tokens being parsed.
            </param>
            <param name="tokenNode">
            The token to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckLabelColon(StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks a label colon for spacing.
            </summary>
            <param name="tokenNode">
            The token to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckMemberAccessSymbol(StyleCop.MasterList{StyleCop.CSharp.CsToken},StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks a member access symbol for spacing.
            </summary>
            <param name="tokens">
            The list of tokens being parsed.
            </param>
            <param name="tokenNode">
            The token to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckNewKeywordSpacing(StyleCop.MasterList{StyleCop.CSharp.CsToken},StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks the spacing around a 'new' keyword.
            </summary>
            <param name="tokens">
            The token list.
            </param>
            <param name="tokenNode">
            The token node to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckNullableTypeSymbol(StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks a <see cref="T:System.Nullable"/> type symbol for spacing.
            </summary>
            <param name="tokenNode">
            The token to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckOpenCurlyBracket(StyleCop.MasterList{StyleCop.CSharp.CsToken},StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks a open bracket for spacing.
            </summary>
            <param name="tokens">
            The list of tokens being parsed.
            </param>
            <param name="tokenNode">
            The token to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckOpenParen(StyleCop.MasterList{StyleCop.CSharp.CsToken},StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks an open parenthesis for spacing.
            </summary>
            <param name="tokens">
            The list of tokens being parsed.
            </param>
            <param name="tokenNode">
            The token to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckOpenSquareBracket(StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks a open bracket for spacing.
            </summary>
            <param name="tokenNode">
            The token to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckOperatorKeyword(StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks the operator keyword for spacing.
            </summary>
            <param name="tokenNode">
            The token to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckPositiveOrNegativeSign(StyleCop.Node{StyleCop.CSharp.CsToken},System.Boolean)">
            <summary>
            Checks a positive/negative sign for spacing.
            </summary>
            <param name="tokenNode">
            The token to check.
            </param>
            <param name="positiveToken">
            True is the token is positive.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckPreprocessorSpacing(StyleCop.CSharp.CsToken)">
            <summary>
            Checks to make sure that preprocessor type keyword is not preceded by a space.
            </summary>
            <param name="preprocessor">
            The preprocessor token.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckSemicolonAndComma(StyleCop.MasterList{StyleCop.CSharp.CsToken},StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks a semicolon or comma for spacing.
            </summary>
            <param name="tokens">
            The master list of tokens.
            </param>
            <param name="tokenNode">
            The token node to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckSingleLineComment(StyleCop.MasterList{StyleCop.CSharp.CsToken},StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks to make sure that the slashes in in the comment are followed by a space.
            </summary>
            <param name="tokens">
            The list of tokens being parsed.
            </param>
            <param name="tokenNode">
            The comment token.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckSpacing(StyleCop.MasterList{StyleCop.CSharp.CsToken},System.Boolean,StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks the spacing of a root.
            </summary>
            <param name="tokens">
            The list of tokens.
            </param>
            <param name="type">
            Indicates whether the tokens are part of a type declaration.
            </param>
            <param name="parentTokenNode">
            The parent token of the token node being checked.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckSymbol(StyleCop.MasterList{StyleCop.CSharp.CsToken},StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks a symbol for spacing.
            </summary>
            <param name="tokens">
            The list of tokens being parsed.
            </param>
            <param name="tokenNode">
            The token to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckTabsInComment(StyleCop.CSharp.CsToken)">
            <summary>
            Checks for tabs in the given comment.
            </summary>
            <param name="comment">
            The comment token.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckUnarySymbol(StyleCop.MasterList{StyleCop.CSharp.CsToken},StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks a unary symbol for spacing.
            </summary>
            <param name="tokens">
            The master list of tokens.
            </param>
            <param name="tokenNode">
            The token to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckUnsafeAccessSymbols(StyleCop.Node{StyleCop.CSharp.CsToken},System.Boolean,StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks an unsafe pointer access symbol sign for spacing.
            </summary>
            <param name="tokenNode">
            The token to check.
            </param>
            <param name="type">
            Indicates whether the token is part of a type declaration.
            </param>
            <param name="parentTokenNode">
            The parent token of the token node being checked.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckWhitespace(StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks to make sure that there is not too many whitespace symbols in a row.
            </summary>
            <param name="tokenNode">
            The whitespace to check.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.CheckXmlHeaderComment(StyleCop.CSharp.XmlHeader)">
            <summary>
            Checks to make sure that the slashes in in the Xml header are followed by a space.
            </summary>
            <param name="header">
            The Xml header token.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.SpacingRules.IsTokenFirstNonWhitespaceTokenOnLine(StyleCop.MasterList{StyleCop.CSharp.CsToken},StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Checks to see if the passed in node is the first node on its line.
            </summary>
            <param name="tokens">
            The master list of tokens.
            </param>
            <param name="node">
            The node to check.
            </param>
            <returns>
            True if this node is the first on the line, otherwise false.
            </returns>
        </member>
        <member name="T:StyleCop.CSharp.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.Strings.AccessModifier">
            <summary>
              Looks up a localized string similar to access modifier.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.Strings.Closing">
            <summary>
              Looks up a localized string similar to closing.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.Strings.CompanyInformationTab">
            <summary>
              Looks up a localized string similar to Company Information.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.Strings.CurlyBracketsInFileDoNotMatch">
            <summary>
              Looks up a localized string similar to The curly brackets within the file do not match..
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.Strings.EnterValidPrefix">
            <summary>
              Looks up a localized string similar to Please enter a one or two digit prefix before clicking the Add button.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.Strings.Files">
            <summary>
              Looks up a localized string similar to files.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.Strings.HungarianTab">
            <summary>
              Looks up a localized string similar to Hungarian.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.Strings.MissingCompanyOrCopyright">
            <summary>
              Looks up a localized string similar to The company name and copyright boxes must be filled in..
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.Strings.Opening">
            <summary>
              Looks up a localized string similar to opening.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.Strings.Other">
            <summary>
              Looks up a localized string similar to other.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.Strings.SpellingPreferredAlternate">
            <summary>
              Looks up a localized string similar to (Preferred alternate: &apos;{0}&apos;).
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.Strings.SpellingUseCompoundWord">
            <summary>
              Looks up a localized string similar to (Use compound word &apos;{0}&apos;).
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.Strings.Static">
            <summary>
              Looks up a localized string similar to static.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.Strings.Title">
            <summary>
              Looks up a localized string similar to StyleCop.
            </summary>
        </member>
        <member name="T:StyleCop.CSharp.Utils">
            <summary>
              Utility functions used by multiple rules.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.Utils.CollectClassMembers(StyleCop.CSharp.ClassBase)">
            <summary>
            Adds all members of a class to a dictionary, taking into account partial classes.
            </summary>
            <param name="parentClass">
            The class to collect. 
            </param>
            <returns>
            Returns the dictionary of class members. 
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.Utils.ContainsPartialMembers(StyleCop.CSharp.CsElement)">
            <summary>
            Determines whether the given element contains any partial members.
            </summary>
            <param name="element">
            The element to check. 
            </param>
            <returns>
            Returns true if the element contains at least one partial member. 
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.Utils.ExtractBaseClassMemberName(StyleCop.CSharp.Expression,StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Extracts the name of the member being called from the base class.
            </summary>
            <param name="parentExpression">
            The expression containing the tokens. 
            </param>
            <param name="baseTokenNode">
            The 'base' keyword token. 
            </param>
            <returns>
            Returns the name of the member or null if there is no member name. 
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.Utils.FindClassMember(System.String,StyleCop.CSharp.ClassBase,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{StyleCop.CSharp.CsElement}},System.Boolean)">
            <summary>
            Finds the given class member in the given class.
            </summary>
            <param name="word">
            The word to check. 
            </param>
            <param name="parentClass">
            The class the word appears in. 
            </param>
            <param name="members">
            The collection of members of the parent class. 
            </param>
            <param name="interfaces">
            True if interface implementations should be included. 
            </param>
            <returns>
            Returns the class members that match against the given name. 
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.Utils.GetClassBase(StyleCop.CSharp.CsElement)">
            <summary>
            Finds the ClassBase object above this element representing a Class or Struct.
            </summary>
            <param name="element">
            The element to start at. 
            </param>
            <returns>
            The ClassBase for the element. 
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.Utils.HasABaseClassSpecified(StyleCop.CSharp.ClassBase)">
            <summary>
            Returns True if this class or any of its Partial Classes has a BaseClass specified.
            </summary>
            <param name="classBase">
            The class to check.
            </param>
            <returns>
            True if it finds a BaseClass.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.Utils.HasImplementedInterfaces(StyleCop.CSharp.ClassBase)">
            <summary>
            Returns True if this class or any of its Partial Classes has a BaseClass specified.
            </summary>
            <param name="classBase">
            The class to check.
            </param>
            <returns>
            True if it finds a BaseClass.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.Utils.IsAReSharperComment(StyleCop.CSharp.CsToken)">
            <summary>
            Checks the token text matches a ReSharper suppression.
            </summary>
            <param name="token">
            The token to check. 
            </param>
            <returns>
            True if its a ReSharper token otherwise false. 
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.Utils.IsExpressionInsideContainer(StyleCop.CSharp.Expression,System.Type[])">
            <summary>
            Returns true if we're inside one of the container types..
            </summary>
            <param name="expresion">
            The expression to start at.
            </param>
            <param name="codeUnits">
            The containers to check.
            </param>
            <returns>
            True if found.
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.Utils.TokenContainNullable(StyleCop.Node{StyleCop.CSharp.CsToken})">
            <summary>
            Returns true if the node Contains any sort of <see cref="T:System.Nullable"/>.
            </summary>
            <param name="token">
            The token to check. 
            </param>
            <returns>
            True if <see cref="T:System.Nullable"/> otherwise False. 
            </returns>
        </member>
        <member name="M:StyleCop.CSharp.Utils.AddClassMember(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{StyleCop.CSharp.CsElement}},StyleCop.CSharp.CsElement,System.String)">
            <summary>
            Adds a class members to the dictionary.
            </summary>
            <param name="members">
            The dictionary of class members. 
            </param>
            <param name="child">
            The class member. 
            </param>
            <param name="name">
            The name of the class member. 
            </param>
        </member>
        <member name="M:StyleCop.CSharp.Utils.AddClassMemberAux(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{StyleCop.CSharp.CsElement}},StyleCop.CSharp.CsElement,System.String)">
            <summary>
            Adds a class members to the dictionary.
            </summary>
            <param name="members">
            The dictionary of class members. 
            </param>
            <param name="child">
            The class member. 
            </param>
            <param name="name">
            The name of the class member. 
            </param>
        </member>
        <member name="M:StyleCop.CSharp.Utils.CollectClassMembersAux(StyleCop.CSharp.ClassBase,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{StyleCop.CSharp.CsElement}})">
            <summary>
            Adds all members of a class to a dictionary.
            </summary>
            <param name="class">
            The class to collect. 
            </param>
            <param name="members">
            Adds all members of the class to the given dictionary. 
            </param>
        </member>
        <member name="M:StyleCop.CSharp.Utils.MatchClassMember(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{StyleCop.CSharp.CsElement}},System.Boolean)">
            <summary>
            Matches the given word with members of the given class.
            </summary>
            <param name="word">
            The word to check. 
            </param>
            <param name="members">
            The collection of members of the parent class. 
            </param>
            <param name="interfaces">
            True if interface implementations should be included. 
            </param>
            <returns>
            Returns the class members that matches against the given name. 
            </returns>
        </member>
        <member name="T:StyleCop.CSharp.ValidPrefixes">
            <summary>
            Options dialog to choose valid, non-Hungarian prefixes.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.ValidPrefixes.analyzer">
            <summary>
            The analyzer that this settings page is attached to.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.ValidPrefixes.addButton">
            <summary>
            The Add button.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.ValidPrefixes.addPrefix">
            <summary>
            The add prefix box.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.ValidPrefixes.columnHeader1">
            <summary>
            The default column on the ListView control.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.ValidPrefixes.dirty">
            <summary>
            True if the page is dirty.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.ValidPrefixes.formAcceptButton">
            <summary>
            Stores the form's accept button while focus is on the addPrefix textbox.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.ValidPrefixes.label1">
            <summary>
            The static text label.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.ValidPrefixes.label2">
            <summary>
            The static text label.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.ValidPrefixes.label3">
            <summary>
            Contains help text.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.ValidPrefixes.prefixList">
            <summary>
            The current prefixes box.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.ValidPrefixes.removeButton">
            <summary>
            The Remove button.
            </summary>
        </member>
        <member name="F:StyleCop.CSharp.ValidPrefixes.tabControl">
            <summary>
            The tab control which hosts this page.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.ValidPrefixes.#ctor">
            <summary>
            Initializes a new instance of the ValidPrefixes class.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.ValidPrefixes.#ctor(StyleCop.CSharp.NamingRules)">
            <summary>
            Initializes a new instance of the ValidPrefixes class.
            </summary>
            <param name="analyzer">
            The analyzer that this settings page is attached to.
            </param>
        </member>
        <member name="P:StyleCop.CSharp.ValidPrefixes.Dirty">
            <summary>
            Gets or sets a value indicating whether any data on the page is dirty.
            </summary>
        </member>
        <member name="P:StyleCop.CSharp.ValidPrefixes.TabName">
            <summary>
            Gets the name of the the tab.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.ValidPrefixes.Activate(System.Boolean)">
            <summary>
            Called when the page is activated.
            </summary>
            <param name="activated">
            Indicates whether the page is being activated or deactivated.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ValidPrefixes.Apply">
            <summary>
            Saves the data and clears the dirty flag.
            </summary>
            <returns>Returns true if the data is saved, false if not.</returns>
        </member>
        <member name="M:StyleCop.CSharp.ValidPrefixes.Initialize(StyleCop.PropertyControl)">
            <summary>
            Initializes the page.
            </summary>
            <param name="propertyControl">
            The tab control object.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ValidPrefixes.PostApply(System.Boolean)">
            <summary>
            Called after all pages have been applied.
            </summary>
            <param name="wasDirty">
            The dirty state of the page before it was applied.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ValidPrefixes.PreApply">
            <summary>
            Called before all pages are applied.
            </summary>
            <returns>Returns false if no pages should be applied.</returns>
        </member>
        <member name="M:StyleCop.CSharp.ValidPrefixes.RefreshSettingsOverrideState">
            <summary>
            Refreshes the bold state of items on the page.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.ValidPrefixes.AddButtonClick(System.Object,System.EventArgs)">
            <summary>
            Event that is fired when the add button is clicked.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ValidPrefixes.AddParentPrefixes">
            <summary>
            Add prefixes from the parent settings.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.ValidPrefixes.AddPrefixGotFocus(System.Object,System.EventArgs)">
            <summary>
            Called when the addPrefix TextBox receives the input focus.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ValidPrefixes.AddPrefixKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when a key is clicked while focus is on the addPrefix textbox.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ValidPrefixes.AddPrefixLostFocus(System.Object,System.EventArgs)">
            <summary>
            Called when the addPrefix TextBox loses the input focus.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ValidPrefixes.EnableDisableRemoveButton">
            <summary>
            Sets the enabled state of the remove button.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.ValidPrefixes.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:StyleCop.CSharp.ValidPrefixes.PrefixListItemSelectionChanged(System.Object,System.Windows.Forms.ListViewItemSelectionChangedEventArgs)">
            <summary>
            Called when the current selection changes in the ListView.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ValidPrefixes.PrefixListKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when a key is clicked while focus is on the prefix list.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ValidPrefixes.RemoveButtonClick(System.Object,System.EventArgs)">
            <summary>
            Event that is fired when the remove button is clicked.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:StyleCop.CSharp.ValidPrefixes.SetBoldState(System.Windows.Forms.ListViewItem)">
            <summary>
            Sets the bold state of the item.
            </summary>
            <param name="item">
            The item to set.
            </param>
        </member>
    </members>
</doc>
